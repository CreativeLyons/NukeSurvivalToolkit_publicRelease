Group {
 name InvertMatrix4_
 help "Invert a pixel based Matrix4 (Defined as layers matrix0, matrix1, matrix2 and matrix3)"
 knobChanged "node = nuke.thisNode()\nknob = nuke.thisKnob()\n\nif knob.name() == \"inputChange\":\n    with node:\n        format_knob = nuke.toNode('Constant1')\['format']\n    if node.input(0):\n        format_knob.setEnabled(False)\n    else:\n        format_knob.setEnabled(True)\n"
 selected true
 xpos -2208
 ypos 688
 addUserKnob {20 Matrix4 l InvertMatrix4}
 addUserKnob {26 Description l "" +STARTLINE T "Invert matrix channels"}
 addUserKnob {26 divider_copyright l "" +STARTLINE}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name Inputmatrix
  xpos 276
  ypos 144
 }
 Dot {
  name Dot3
  tile_color 0xcccccc00
  xpos 310
  ypos 296
 }
set N120b6ee0 [stack 0]
 Dot {
  name Dot20
  tile_color 0xcccccc00
  xpos 456
  ypos 296
 }
add_layer {matrix0 matrix0.0 matrix0.1 matrix0.2 matrix0.3}
 Shuffle {
  in matrix0
  name Shuffle1
  label "in \[value in]-->out \[value out]"
  xpos 422
  ypos 343
 }
set N14561c90 [stack 0]
add_layer {matrix1 matrix1.0 matrix1.1 matrix1.2 matrix1.3}
 Shuffle {
  in matrix1
  name Shuffle2
  label "in \[value in]-->out \[value out]"
  xpos 422
  ypos 383
 }
set N1c218280 [stack 0]
add_layer {matrix2 matrix2.0 matrix2.1 matrix2.2 matrix2.3}
 Shuffle {
  in matrix2
  name Shuffle3
  label "in \[value in]-->out \[value out]"
  xpos 422
  ypos 419
 }
set N1c736ac0 [stack 0]
add_layer {matrix3 matrix3.0 matrix3.1 matrix3.2 matrix3.3}
 Shuffle {
  in matrix3
  name Shuffle4
  label "in \[value in]-->out \[value out]"
  xpos 422
  ypos 456
 }
 Dot {
  name Dot8
  tile_color 0x9e3c6300
  xpos 707
  ypos 465
 }
set N142755e0 [stack 0]
 Dot {
  name Dot11
  tile_color 0x9e3c6300
  xpos 831
  ypos 465
 }
set N11330380 [stack 0]
 Dot {
  name Dot12
  tile_color 0x9e3c6300
  xpos 965
  ypos 465
 }
set N1b902700 [stack 0]
 Dot {
  name Dot16
  tile_color 0x9e3c6300
  xpos 1113
  ypos 465
 }
push $N1c736ac0
 Dot {
  name Dot7
  tile_color 0x9e3c6300
  xpos 666
  ypos 428
 }
set N1c6f5ac0 [stack 0]
 Dot {
  name Dot10
  tile_color 0x9e3c6300
  xpos 821
  ypos 428
 }
set N1e8d5010 [stack 0]
 Dot {
  name Dot13
  tile_color 0x9e3c6300
  xpos 949
  ypos 428
 }
set N1133ec50 [stack 0]
 Dot {
  name Dot17
  tile_color 0x9e3c6300
  xpos 1100
  ypos 428
 }
push $N1c218280
 Dot {
  name Dot6
  tile_color 0x9e3c6300
  xpos 637
  ypos 392
 }
set N1c7017f0 [stack 0]
 Dot {
  name Dot9
  tile_color 0x9e3c6300
  xpos 808
  ypos 392
 }
set N11323810 [stack 0]
 Dot {
  name Dot14
  tile_color 0x9e3c6300
  xpos 927
  ypos 392
 }
set N1eabc3d0 [stack 0]
 Dot {
  name Dot18
  tile_color 0x9e3c6300
  xpos 1084
  ypos 392
 }
push $N14561c90
 Dot {
  name Dot5
  tile_color 0x9e3c6300
  xpos 592
  ypos 352
 }
set N1e9a4770 [stack 0]
 Dot {
  name Dot4
  tile_color 0x9e3c6300
  xpos 776
  ypos 352
 }
set N1c087c20 [stack 0]
 Dot {
  name Dot15
  tile_color 0x9e3c6300
  xpos 905
  ypos 352
 }
set N1ec479e0 [stack 0]
 Dot {
  name Dot19
  tile_color 0x9e3c6300
  xpos 1068
  ypos 352
 }
 BlinkScript {
  inputs 4
  recompileCount 14
  ProgramGroup 1
  KernelDescription "2 \"InvertMatrix4\" iterate pixelWise 24c0b57d50e6fc4d3de1ddabffc2c534b1cd8bf00f432f09e06cab24b7b23d50 5 \"matrix0\" Read Point \"matrix1\" Read Point \"matrix2\" Read Point \"matrix3\" Read Point \"dst\" Write Point 0 0 0"
  kernelSource "kernel InvertMatrix4 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix0; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix1; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix2; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix3; // the input image\n  Image<eWrite> dst; // the output image\n\n  void process() \{\n    // Read the input image\n    SampleType(matrix0) m0 = matrix0();\n    SampleType(matrix1) m1 = matrix1();\n    SampleType(matrix2) m2 = matrix2();\n    SampleType(matrix3) m3 = matrix3();\n\n    // Create the matrix object (matrix3 in this case)\n    float4x4  matrix;\n    matrix\[0]\[0] = m0.x;\n    matrix\[0]\[1] = m0.y;\n    matrix\[0]\[2] = m0.z;\n    matrix\[0]\[3] = m0.w;\n    matrix\[1]\[0] = m1.x;\n    matrix\[1]\[1] = m1.y;\n    matrix\[1]\[2] = m1.z;\n    matrix\[1]\[3] = m1.w;\n    matrix\[2]\[0] = m2.x;\n    matrix\[2]\[1] = m2.y;\n    matrix\[2]\[2] = m2.z;\n    matrix\[2]\[3] = m2.w;\n    matrix\[3]\[0] = m3.x;\n    matrix\[3]\[1] = m3.y;\n    matrix\[3]\[2] = m3.z;\n    matrix\[3]\[3] = m3.w;\n\n    // Inverse the matrix\n    matrix = matrix.invert();\n\n    // Write the result to the output image\n    dst() = float4(matrix\[3]\[0], matrix\[3]\[1], matrix\[3]\[2], matrix\[3]\[3]);\n  \}\n\};\n"
  rebuild ""
  rebuild_finalise ""
  name BlinkScript4
  xpos 1034
  ypos 579
 }
 Dot {
  name Dot2
  tile_color 0xcccccc00
  xpos 1068
  ypos 866
 }
push $N1b902700
push $N1133ec50
push $N1eabc3d0
push $N1ec479e0
 BlinkScript {
  inputs 4
  recompileCount 14
  ProgramGroup 1
  KernelDescription "2 \"InvertMatrix4\" iterate pixelWise 18ad5fdc0440a3820ed7a9939c0cfbbf7fad1323aed420c38542f1e186aa8c86 5 \"matrix0\" Read Point \"matrix1\" Read Point \"matrix2\" Read Point \"matrix3\" Read Point \"dst\" Write Point 0 0 0"
  kernelSource "kernel InvertMatrix4 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix0; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix1; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix2; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix3; // the input image\n  Image<eWrite> dst; // the output image\n\n  void process() \{\n    // Read the input image\n    SampleType(matrix0) m0 = matrix0();\n    SampleType(matrix1) m1 = matrix1();\n    SampleType(matrix2) m2 = matrix2();\n    SampleType(matrix3) m3 = matrix3();\n\n    // Create the matrix object (matrix3 in this case)\n    float4x4  matrix;\n    matrix\[0]\[0] = m0.x;\n    matrix\[0]\[1] = m0.y;\n    matrix\[0]\[2] = m0.z;\n    matrix\[0]\[3] = m0.w;\n    matrix\[1]\[0] = m1.x;\n    matrix\[1]\[1] = m1.y;\n    matrix\[1]\[2] = m1.z;\n    matrix\[1]\[3] = m1.w;\n    matrix\[2]\[0] = m2.x;\n    matrix\[2]\[1] = m2.y;\n    matrix\[2]\[2] = m2.z;\n    matrix\[2]\[3] = m2.w;\n    matrix\[3]\[0] = m3.x;\n    matrix\[3]\[1] = m3.y;\n    matrix\[3]\[2] = m3.z;\n    matrix\[3]\[3] = m3.w;\n\n    // Inverse the matrix\n    matrix = matrix.invert();\n\n    // Write the result to the output image\n    dst() = float4(matrix\[2]\[0], matrix\[2]\[1], matrix\[2]\[2], matrix\[2]\[3]);\n  \}\n\};\n"
  rebuild ""
  rebuild_finalise ""
  name BlinkScript3
  xpos 871
  ypos 585
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 905
  ypos 776
 }
push $N11330380
push $N1e8d5010
push $N11323810
push $N1c087c20
 BlinkScript {
  inputs 4
  recompileCount 14
  ProgramGroup 1
  KernelDescription "2 \"InvertMatrix4\" iterate pixelWise e9f630cc235826bda0787271e2c79d1689a8462ddf208e8692d52b548c8b67e3 5 \"matrix0\" Read Point \"matrix1\" Read Point \"matrix2\" Read Point \"matrix3\" Read Point \"dst\" Write Point 0 0 0"
  kernelSource "kernel InvertMatrix4 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix0; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix1; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix2; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix3; // the input image\n  Image<eWrite> dst; // the output image\n\n  void process() \{\n    // Read the input image\n    SampleType(matrix0) m0 = matrix0();\n    SampleType(matrix1) m1 = matrix1();\n    SampleType(matrix2) m2 = matrix2();\n    SampleType(matrix3) m3 = matrix3();\n\n    // Create the matrix object (matrix3 in this case)\n    float4x4  matrix;\n    matrix\[0]\[0] = m0.x;\n    matrix\[0]\[1] = m0.y;\n    matrix\[0]\[2] = m0.z;\n    matrix\[0]\[3] = m0.w;\n    matrix\[1]\[0] = m1.x;\n    matrix\[1]\[1] = m1.y;\n    matrix\[1]\[2] = m1.z;\n    matrix\[1]\[3] = m1.w;\n    matrix\[2]\[0] = m2.x;\n    matrix\[2]\[1] = m2.y;\n    matrix\[2]\[2] = m2.z;\n    matrix\[2]\[3] = m2.w;\n    matrix\[3]\[0] = m3.x;\n    matrix\[3]\[1] = m3.y;\n    matrix\[3]\[2] = m3.z;\n    matrix\[3]\[3] = m3.w;\n\n    // Inverse the matrix\n    matrix = matrix.invert();\n\n    // Write the result to the output image\n    dst() = float4(matrix\[1]\[0], matrix\[1]\[1], matrix\[1]\[2], matrix\[1]\[3]);\n  \}\n\};\n"
  rebuild ""
  rebuild_finalise ""
  name BlinkScript2
  xpos 742
  ypos 581
 }
 Dot {
  name Dot37
  tile_color 0xcccccc00
  xpos 776
  ypos 692
 }
push $N142755e0
push $N1c6f5ac0
push $N1c7017f0
push $N1e9a4770
 BlinkScript {
  inputs 4
  recompileCount 15
  ProgramGroup 1
  KernelDescription "2 \"InvertMatrix4\" iterate pixelWise 13aa95e9193320b60408dcef52f07d536b6bc8570746ebe3a513989e032825a7 5 \"matrix0\" Read Point \"matrix1\" Read Point \"matrix2\" Read Point \"matrix3\" Read Point \"dst\" Write Point 0 0 0"
  kernelSource "kernel InvertMatrix4 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix0; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix1; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix2; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix3; // the input image\n  Image<eWrite> dst; // the output image\n\n  void process() \{\n    // Read the input image\n    SampleType(matrix0) m0 = matrix0();\n    SampleType(matrix1) m1 = matrix1();\n    SampleType(matrix2) m2 = matrix2();\n    SampleType(matrix3) m3 = matrix3();\n\n    // Create the matrix object (matrix3 in this case)\n    float4x4  matrix;\n    matrix\[0]\[0] = m0.x;\n    matrix\[0]\[1] = m0.y;\n    matrix\[0]\[2] = m0.z;\n    matrix\[0]\[3] = m0.w;\n    matrix\[1]\[0] = m1.x;\n    matrix\[1]\[1] = m1.y;\n    matrix\[1]\[2] = m1.z;\n    matrix\[1]\[3] = m1.w;\n    matrix\[2]\[0] = m2.x;\n    matrix\[2]\[1] = m2.y;\n    matrix\[2]\[2] = m2.z;\n    matrix\[2]\[3] = m2.w;\n    matrix\[3]\[0] = m3.x;\n    matrix\[3]\[1] = m3.y;\n    matrix\[3]\[2] = m3.z;\n    matrix\[3]\[3] = m3.w;\n\n    // Inverse the matrix\n    matrix = matrix.invert();\n\n    // Write the result to the output image\n    dst() = float4(matrix\[0]\[0], matrix\[0]\[1], matrix\[0]\[2], matrix\[0]\[3]);\n  \}\n\};\n"
  rebuild ""
  rebuild_finalise ""
  name BlinkScript1
  selected true
  xpos 558
  ypos 588
 }
push $N120b6ee0
 Copy {
  inputs 2
  from0 rgba.red
  to0 matrix0.0
  from1 rgba.green
  to1 matrix0.1
  from2 rgba.blue
  to2 matrix0.2
  from3 rgba.alpha
  to3 matrix0.3
  bbox B
  name Copy2
  xpos 276
  ypos 569
 }
 Copy {
  inputs 2
  from0 rgba.red
  to0 matrix1.0
  from1 rgba.green
  to1 matrix1.1
  from2 rgba.blue
  to2 matrix1.2
  from3 rgba.alpha
  to3 matrix1.3
  bbox B
  name Copy1
  xpos 276
  ypos 664
 }
 Copy {
  inputs 2
  from0 rgba.red
  to0 matrix2.0
  from1 rgba.green
  to1 matrix2.1
  from2 rgba.blue
  to2 matrix2.2
  from3 rgba.alpha
  to3 matrix2.3
  bbox B
  name Copy4
  xpos 276
  ypos 748
 }
 Copy {
  inputs 2
  from0 rgba.red
  to0 matrix3.0
  from1 rgba.green
  to1 matrix3.1
  from2 rgba.blue
  to2 matrix3.2
  from3 rgba.alpha
  to3 matrix3.3
  bbox B
  name Copy5
  xpos 276
  ypos 838
 }
 Output {
  name Output1
  xpos 276
  ypos 1059
 }
end_group
