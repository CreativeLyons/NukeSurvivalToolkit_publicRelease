Group {
 name Deep2VPosition
 tile_color 0x2866ff
 label "<font color=cyan>Deep Output</font>"
 addUserKnob {20 tab_general l General}
 addUserKnob {22 set_link l "link to selected camera" t "Deep data is related to camera. So when convert deep data to anything, it required the camera data.\n\nhow to use :\nSelect the camera, which can be link to any axis nodes. This tool will get the focal, haperture and world matrix from selected camera to generate world space position data.\n\nYou can find the world space position pass store under <b>'deepPosition'</b> channel after this node. The pass support volumatric deep data. If want to bring the position data to 2D in downstream. Please only use <b>DVPToImage</b> which comes along with this toolset.\n\nAdditional note:\nThis node will also create another channel called <b>'deepRawColor'</b> . This channel stored the original of deep data from input for any dev purposes in downstream. User not necessary to use this channel but better to keep it if this toolset occur in downstream." T "def getLevel() :\n\t### level define ###\n\tif len(nuke.thisNode().fullName().split('.')) == 1 :\n\t\t  ggLevel = nuke.root()\n\telse :\n\t\t  nodePath = nuke.thisNode().fullName().split('.')\n\t\t  nodePath.pop()\n\t\t  ggLevel = nuke.toNode('.'.join(nodePath))\n\treturn ggLevel\n\nroot = getLevel()\nthisGRP = nuke.thisGroup()\n\nmainKnobs = \['world_matrix','cam_focal','cam_haperture','cam_win_translate','cam_win_scale','cam_winroll']\ndefaultKnobs = \{\n\t\t\t'world matrix' : 'world_matrix',\n\t\t\t'focal length' : 'focal',\n\t\t\t'horiz aperture' : 'haperture',\n\t\t\t'window translate' : 'win_translate',\n\t\t\t'window scale' : 'win_scale',\n\t\t\t'window roll' : 'winroll'\n\t\t\t\}\nselNodeKnobs = \[]\nmissingKnob = \[]\n\ntry :\n\twith root :\n\t\tselNode = nuke.selectedNode()\n\n\tfor knob in selNode.knobs() :\n\t\tselNodeKnobs.append( knob )\n\n\tselNodeKnobs.sort()\n\n\tfor key,value in defaultKnobs.items() :\n\t\tif value not in selNodeKnobs :\n\t\t\tmissingKnob.append( key )\n\n\tif not len(missingKnob) :\n\t\twith root :\n\t\t\tfor knob in mainKnobs :\n\t\t\t\tthisGRP\[knob].clearAnimated()\n\t\t\t\t\n\t\t\tCAMnode = selNode.name()\n\t\t\tthisGRP\[mainKnobs\[0]].setExpression('\{0\}.world_matrix'.format(CAMnode))\n\t\t\tthisGRP\[mainKnobs\[1]].setExpression('\{0\}.focal'.format(CAMnode))\n\t\t\tthisGRP\[mainKnobs\[2]].setExpression('\{0\}.haperture'.format(CAMnode))\n\t\t\tthisGRP\[mainKnobs\[3]].setExpression('\{0\}.win_translate'.format(CAMnode))\n\t\t\tthisGRP\[mainKnobs\[4]].setExpression('\{0\}.win_scale'.format(CAMnode))\n\t\t\tthisGRP\[mainKnobs\[5]].setExpression('\{0\}.winroll'.format(CAMnode))\n\telse :\n\t\tp = nuke.Panel('Select knobs :')\n\t\tp.addBooleanCheckBox( '<b>Unable to find the default knobs. Please use the pulldown menu below to define the knob manually.</b>' , False)\n\t\tfor rk in missingKnob :\n\t\t\tp.addEnumerationPulldown( rk, ' '.join( selNodeKnobs ) )\n\n\t\tif p.show() :\n\t\t\ttry :\n\t\t\t\tfor key,value in defaultKnobs.items() :\n\t\t\t\t\tif p.value( key ) != None :\n\t\t\t\t\t\tdefaultKnobs\[key] = p.value( key )\n\t\t\texcept :\n\t\t\t\tpass\n\n\t\t\twith root :\n\t\t\t\tfor knob in mainKnobs :\n\t\t\t\t\tthisGRP\[knob].clearAnimated()\n\t\t\t\t\n\t\t\t\tCAMnode = selNode.name()\n\t\t\t\tthisGRP\[mainKnobs\[0]].setExpression('\{0\}.\{1\}'.format(CAMnode, defaultKnobs\['world matrix']))\n\t\t\t\tthisGRP\[mainKnobs\[1]].setExpression('\{0\}.\{1\}'.format(CAMnode, defaultKnobs\['focal length']))\n\t\t\t\tthisGRP\[mainKnobs\[2]].setExpression('\{0\}.\{1\}'.format(CAMnode, defaultKnobs\['horiz aperture']))\n\t\t\t\tthisGRP\[mainKnobs\[3]].setExpression('\{0\}.\{1\}'.format(CAMnode, defaultKnobs\['window translate']))\n\t\t\t\tthisGRP\[mainKnobs\[4]].setExpression('\{0\}.\{1\}'.format(CAMnode, defaultKnobs\['window scale']))\n\t\t\t\tthisGRP\[mainKnobs\[5]].setExpression('\{0\}.\{1\}'.format(CAMnode, defaultKnobs\['window roll']))\nexcept :\n\tnuke.message('no node selected.')" +STARTLINE}
 addUserKnob {22 remove_link l "remove linked expression" t "Remove the linked camera expression but won't reset any data. So the position data still works if input doesn't contain any camera movement." -STARTLINE T "thisGRP = nuke.thisGroup()\nmainKnobs = \['world_matrix','cam_focal','cam_haperture','cam_win_translate','cam_win_scale','cam_winroll']\n\nfor knob in thisGRP.knobs() :\n    if mainKnobs.count(knob) != 0 :\n        thisGRP\[knob].clearAnimated()"}
 addUserKnob {22 bake_link l "bake expression link" t "Baked out the existing expression link back to this node itself. After that, camera node is not required for this node anymore. Baked value is base on the frame range in project setting of the nuke script.\n\n* Nuke 11.2 has issue with expression link on this node. It will crash your nuke in some cases, but it will be fine when re-open the nuke script. Because of this issue, recommand to bake the value." T "thisGRP = nuke.thisGroup()\n\nframeST = nuke.root().firstFrame()\nframeED = nuke.root().lastFrame()\n\nallknobs = \['cam_focal','cam_haperture','cam_win_translate','cam_win_scale','cam_winroll','world_matrix']\nalldata = \{\}\n\nchknobs = 0\nfor knob in allknobs :\n\tif thisGRP\[knob].hasExpression() :\n\t\tchknobs = 1\n\nif chknobs :\n\tfor knob in allknobs :\n\t\tfor t in range( frameST, frameED+1, 1 ) :\n\t\t\ttry :\n\t\t\t\talldata\[knob].append( thisGRP\[knob].getValueAt(t) )\n\t\t\texcept :\n\t\t\t\talldata\[knob] = \[ thisGRP\[knob].getValueAt(t) ]\n\n\tfor knob in allknobs :\n\t\tthisGRP\[knob].clearAnimated()\n\t\tthisGRP\[knob].setAnimated()\n\n\tfor knob in allknobs :\n\t\tfor t in range( frameST, frameED+1, 1 ) :\n\t\t\tif type( alldata\[knob]\[t-frameST] ) is float :\n\t\t\t\tthisGRP\[knob].setValueAt( alldata\[knob]\[t-frameST] , t )\n\t\t\tif type( alldata\[knob]\[t-frameST] ) is list :\n\t\t\t\tfor i in range( len( alldata\[knob]\[t-frameST] ) ) :\n\t\t\t\t\tthisGRP\[knob].setValueAt( alldata\[knob]\[t-frameST]\[i] , t , i )\nelse :\n\tnuke.message('no expression link found.')" +STARTLINE}
 addUserKnob {22 copy_data l "copy from selected camera" t "Select the camera, then this will process 'link to selected camera' and 'bake expression link' in once.\n\n* Nuke 11.2 has issue with expression link on this node. It will crash your nuke in some cases, but it will be fine when re-open the nuke script. Because of this issue, recommand to bake the value." -STARTLINE T "thisGRP = nuke.thisGroup()\nthisGRP\['set_link'].execute()\nthisGRP\['bake_link'].execute()"}
 addUserKnob {20 cam_data_grp l "CAMERA DATA" n 1}
 cam_data_grp 0
 addUserKnob {7 cam_focal l "focal length" R 5 100}
 cam_focal 50
 addUserKnob {7 cam_haperture l "horiz aperture" R 0.1 50}
 cam_haperture 24.576
 addUserKnob {30 cam_win_translate l "window translate"}
 addUserKnob {30 cam_win_scale l "window scale"}
 cam_win_scale {1 1}
 addUserKnob {7 cam_winroll l "window roll" R -45 45}
 addUserKnob {41 world_matrix l "world matrix" T cam_data.matrix}
 addUserKnob {20 endGroup_1 l endGroup n -1}
 addUserKnob {20 t_VERSION l Version}
 addUserKnob {26 l_VERSION l <b>Version</b> T 3.8}
 addUserKnob {26 l_DATE l "<b>Date Modified</b>" T 2020-02-13}
 addUserKnob {22 btn_CHANGELOG l <b>Changlelog</b> T "log = \"3.8<br>'DVPMatte'<br>&nbsp;&nbsp;-&nbsp;fixed&nbsp;cube&nbsp;matte&nbsp;shape&nbsp;result&nbsp;when&nbsp;pivot&nbsp;changed.&nbsp;Sphere&nbsp;and&nbsp;Cylinder&nbsp;were&nbsp;fine&nbsp;in&nbsp;the&nbsp;past&nbsp;versions.<br>'DVProjection'<br>&nbsp;&nbsp;-&nbsp;link&nbsp;camera&nbsp;replaced&nbsp;transformation&nbsp;by&nbsp;world&nbsp;matrix,&nbsp;so&nbsp;it&nbsp;works&nbsp;with&nbsp;camera&nbsp;stack&nbsp;with&nbsp;axis.<br>&nbsp;&nbsp;-&nbsp;removed&nbsp;preview&nbsp;projection&nbsp;camera&nbsp;in&nbsp;3D&nbsp;view.<br><br>3.7<br>Toolset&nbsp;update&nbsp;:<br>&nbsp;&nbsp;'DVPort'<br>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;added&nbsp;'near'&nbsp;&&nbsp;'far&nbsp;knobs<br>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;capable&nbsp;with&nbsp;'DeepBoolean'&nbsp;v1.4<br>&nbsp;&nbsp;'DVPmatte'<br>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;fixed&nbsp;missing&nbsp;premult&nbsp;original&nbsp;alpha&nbsp;process<br>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;capable&nbsp;with&nbsp;'DeepBoolean'&nbsp;v1.4<br>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;revert&nbsp;uniform_scale&nbsp;default&nbsp;value&nbsp;back&nbsp;to&nbsp;1.0<br><br>3.6<br>'DVPsetLight'<br>-&nbsp;improved&nbsp;'generated&nbsp;normal&nbsp;(estimate&nbsp;from&nbsp;position)'&nbsp;and&nbsp;changed&nbsp;to&nbsp;blink&nbsp;script.&nbsp;Get&nbsp;better&nbsp;edges&nbsp;on&nbsp;deepNormal.\"\nnuke.message( log )" +STARTLINE}
 addUserKnob {26 l_DEV l "<b>Developed by</b>" T "<a href='https://facebook.com/MJTLab'><font color='orange'>Mark Joey Tang</font></a>"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x7f7f7fff
  label bin
  note_font_size 42
  xpos -770
  ypos -291
  bdwidth 528
  bdheight 265
 }
 Group {
  inputs 0
  name inverseMatrix_cam
  tile_color 0x337f4cff
  xpos -712
  ypos -149
  addUserKnob {20 User}
  addUserKnob {1 knob_path}
  knob_path cam_data.world_matrix
  addUserKnob {26 ""}
  addUserKnob {41 id T id_assign.matrix}
  addUserKnob {26 ""}
  addUserKnob {7 determinant}
  determinant {{"\[value \[value knob_path].\[value id.0]] * ((\[value \[value knob_path].\[value id.4]]*\[value \[value knob_path].\[value id.8]]) - (\[value \[value knob_path].\[value id.5]]*\[value \[value knob_path].\[value id.7]])) - \[value \[value knob_path].\[value id.1]] * ((\[value \[value knob_path].\[value id.3]]*\[value \[value knob_path].\[value id.8]]) - (\[value \[value knob_path].\[value id.5]]*\[value \[value knob_path].\[value id.6]])) + \[value \[value knob_path].\[value id.2]] * ((\[value \[value knob_path].\[value id.3]]*\[value \[value knob_path].\[value id.7]])-(\[value \[value knob_path].\[value id.4]]*\[value \[value knob_path].\[value id.6]]))"}}
  addUserKnob {26 ""}
  addUserKnob {41 cofactor T mtx_cofactor.matrix}
  addUserKnob {26 ""}
  addUserKnob {41 invMatrix T matrix_output.matrix}
 }
  Matrix {
   inputs 0
   matrix {
       {0 1 2}
       {4 5 6}
       {8 9 10}
     }
   name id_assign
   xpos -12
   ypos 33
  }
  Matrix {
   inputs 0
   matrix {
       {{"(\[value \[value knob_path].\[value id.4]]*\[value \[value knob_path].\[value id.8]]) - (\[value \[value knob_path].\[value id.5]]*\[value \[value knob_path].\[value id.7]])"} {"(\[value \[value knob_path].\[value id.7]]*\[value \[value knob_path].\[value id.2]]) - (\[value \[value knob_path].\[value id.8]]*\[value \[value knob_path].\[value id.1]])"} {"(\[value \[value knob_path].\[value id.1]]*\[value \[value knob_path].\[value id.5]]) - (\[value \[value knob_path].\[value id.2]]*\[value \[value knob_path].\[value id.4]])"}}
       {{"(\[value \[value knob_path].\[value id.5]]*\[value \[value knob_path].\[value id.6]]) - (\[value \[value knob_path].\[value id.3]]*\[value \[value knob_path].\[value id.8]])"} {"(\[value \[value knob_path].\[value id.8]]*\[value \[value knob_path].\[value id.0]]) - (\[value \[value knob_path].\[value id.6]]*\[value \[value knob_path].\[value id.2]])"} {"(\[value \[value knob_path].\[value id.2]]*\[value \[value knob_path].\[value id.3]]) - (\[value \[value knob_path].\[value id.0]]*\[value \[value knob_path].\[value id.5]])"}}
       {{"(\[value \[value knob_path].\[value id.3]]*\[value \[value knob_path].\[value id.7]]) - (\[value \[value knob_path].\[value id.4]]*\[value \[value knob_path].\[value id.6]])"} {"(\[value \[value knob_path].\[value id.6]]*\[value \[value knob_path].\[value id.1]]) - (\[value \[value knob_path].\[value id.7]]*\[value \[value knob_path].\[value id.0]])"} {"(\[value \[value knob_path].\[value id.0]]*\[value \[value knob_path].\[value id.4]]) - (\[value \[value knob_path].\[value id.1]]*\[value \[value knob_path].\[value id.3]])"}}
     }
   name mtx_cofactor
   xpos 86
   ypos 32
  }
  Matrix {
   inputs 0
   matrix {
       {{"cofactor.0 == 0 || determinant == 0 ? 0 : cofactor.0/determinant"} {"cofactor.1 == 0 || determinant == 0 ? 0 : cofactor.1/determinant"} {"cofactor.2 == 0 || determinant == 0 ? 0 : cofactor.2/determinant"}}
       {{"cofactor.3 == 0 || determinant == 0 ? 0 : cofactor.3/determinant"} {"cofactor.4 == 0 || determinant == 0 ? 0 : cofactor.4/determinant"} {"cofactor.5 == 0 || determinant == 0 ? 0 : cofactor.5/determinant"}}
       {{"cofactor.6 == 0 || determinant == 0 ? 0 : cofactor.6/determinant"} {"cofactor.7 == 0 || determinant == 0 ? 0 : cofactor.7/determinant"} {"cofactor.8 == 0 || determinant == 0 ? 0 : cofactor.8/determinant"}}
     }
   name matrix_output
   xpos 186
   ypos 33
  }
 end_group
 Camera {
  inputs 0
  display off
  selectable false
  rotate {0 0 {-parent.cam_winroll}}
  win_translate {{parent.cam_win_translate} {parent.cam_win_translate}}
  win_scale {{parent.cam_win_scale} {parent.cam_win_scale}}
  name fb_data
  xpos -546
  ypos -169
 }
 Camera {
  inputs 0
  display off
  selectable false
  rot_order XYZ
  useMatrix true
  focal {{parent.cam_focal}}
  haperture {{parent.cam_haperture}}
  name cam_data
  xpos -412
  ypos -170
 }
add_layer {deepRawColor deepRawColor.red deepRawColor.green deepRawColor.blue deepRawColor.alpha}
 AddChannels {
  inputs 0
  channels deepRawColor
  name AddChannels2
  xpos -138
  ypos -15
 }
add_layer {deepPosition deepPosition.red deepPosition.green deepPosition.blue deepPosition.alpha}
 AddChannels {
  inputs 0
  channels deepPosition
  name AddChannels3
  xpos -137
  ypos -291
 }
 Input {
  inputs 0
  name deep
  xpos 0
  ypos -373
 }
 DeepRecolor {
  inputs 2
  channels {{{parent.AddChannels3.channels}}}
  name DeepRecolor2
  xpos 0
  ypos -291
 }
 DeepExpression {
  temp_name0 xpos
  temp_expr0 "( ( x/\[value input.width] ) - 0.5 ) * \[value hratio] * deep.front )"
  temp_name1 ypos
  temp_expr1 "( ( y/\[value input.height] ) - 0.5 ) * ( ( \[value hratio]*deep.front ) / ( \[value input.width]/\[value input.height] ) ) * 1 / \[value root.format.pixel_aspect]"
  temp_name2 zpos
  temp_expr2 -deep.front
  chans0 {deepPosition.red deepPosition.green deepPosition.blue none}
  chans1 none
  deepPosition.red "( xpos * \[value fb_data.world_matrix.0] + ypos * \[value fb_data.world_matrix.1] ) * \[value fb_data.win_scale.u] + ( \[value hratio] * deep.front * \[value fb_data.win_translate.u] / 2 )"
  deepPosition.green "( xpos * \[value fb_data.world_matrix.4] + ypos * \[value fb_data.world_matrix.5] ) * \[value fb_data.win_scale.v] + ( \[value hratio] * deep.front * \[value fb_data.win_translate.v] / 2 )"
  deepPosition.blue zpos
  name DeepExpression3
  label "apply cam window"
  xpos 0
  ypos -197
  addUserKnob {20 User}
  addUserKnob {7 hratio}
  hratio {{"\[value cam_data.haperture] / \[value cam_data.focal]"}}
 }
 DeepExpression {
  chans0 {deepPosition.red deepPosition.green deepPosition.blue none}
  chans1 none
  deepPosition.red "(deepPosition.red * \[value cam_data.world_matrix.0] + deepPosition.green * \[value cam_data.world_matrix.1] + deepPosition.blue * \[value cam_data.world_matrix.2]) + \[value cam_data.world_matrix.3]"
  deepPosition.green "(deepPosition.red * \[value cam_data.world_matrix.4] + deepPosition.green * \[value cam_data.world_matrix.5] + deepPosition.blue * \[value cam_data.world_matrix.6]) + \[value cam_data.world_matrix.7]"
  deepPosition.blue "(deepPosition.red * \[value cam_data.world_matrix.8] + deepPosition.green * \[value cam_data.world_matrix.9] + deepPosition.blue * \[value cam_data.world_matrix.10]) + \[value cam_data.world_matrix.11]"
  name DeepExpression5
  label "back to camera position"
  xpos 0
  ypos -103
 }
 DeepRecolor {
  inputs 2
  channels {{{parent.AddChannels2.channels}}}
  name DeepRecolor4
  xpos 0
  ypos -15
 }
 DeepExpression {
  chans0 {deepRawColor.red deepRawColor.green deepRawColor.blue deepPosition.alpha}
  chans1 none
  deepRawColor.red red
  deepRawColor.green green
  deepRawColor.blue blue
  deepPosition.alpha alpha
  name DeepExpression1
  label "keep input color"
  xpos 0
  ypos 79
 }
 Output {
  name Output1
  xpos 0
  ypos 173
 }
end_group
