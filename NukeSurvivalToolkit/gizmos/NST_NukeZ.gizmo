Group {
 name NukeZ
 inputs 0
 tile_color 0xffc900ff
 label "<center><img src='PoissonMesh.png'></center>"
 note_font "DejaVu Sans Bold"
 note_font_size 16
 addUserKnob {20 tab_general l General}
 addUserKnob {4 node M {AddSTMap ApplyLUT Assert AttribGeo Axis Axis2 BakedPointCloud BakedPointCloudMesh Bilateral Bilateral2 BlockGPU Blocky BumpMat BurnIn CCorrect Camera Camera2 CameraShake CameraShake2 CameraShake3 CameraTracker1_0 Card Card2 CardObj ChannelSelector Checker CheckerBoard CheckerBoard2 ChromaKeyer ColorTransferWrapper Compare Convolve Convolve2 Convolve2 CubeObj CylinderObj DeInterlace DeepChannelBlanker DeepClip DeepClipZ DeepColorCorrect DeepColorCorrect2 DeepCompare DeepDeOverlap DeepHoldout DeepHoldout2 DeepMask DeepMerge DeepMerge2 DeepOmit DeepShift DeepToImage DeepToImage2 DeepVolumeMaker Denoise Denoise2 Denoise2 DepthGenerator DepthGenerator1_0 DirBlur DirBlurWrapper DualBlend EdgeDetect EdgeScatter ExecuteTreeMT FFT FFTMultiply FieldSelect Fill FishEye FloodFill Fog FromDeep GPUFileShader GPUOp GenerateLUTGeo Grain Grain2 GridWarp GridWarp2 GridWarp3 IBK IBK2Gizmo IBKColour IBKColourV3 IBKEdge IBKGizmo IBKGizmoV3 IBKSFill IBKSplit IT8_Reader IT8_Writer Inpaint Inpaint2 InvFFT LensDistortion LensDistortion1_0 LensDistortion2 LevelSet Light Light2 LogGeo MakeLatLongMap Merge Merge2 MergeGeo MeshGeo MindRead Mirror Mirror2 ModelBuilderGeo Modeler Modeler1_0 Morph MultiTexture NodeWrapper OFlow OpStatisticsOp PLogLin PSDMerge ParticleBlinkScriptRender ParticleMove ParticleSystem ParticleToImage PerspDistort PixelStat PixelSum PlanarTracker PlanarTracker1_0 PointCloudGenerator1_0 PositionToPoints PositionToPoints2 Posterize Primatte Primatte2 Primatte3 Primatte3OLD PrintHash PrintMetaData Project3D Project3D2 ProjectionSolver ProjectionSolver1_0 PythonGeo ReadGeo ReadGeo2 Reconcile3D Rectangle RendermanShader Resize Shuffle Shuffle2 SimpleAxis SphereObj SphereToLatLongMap SphericalMap SphericalTransform SphericalTransform2 SplineWarp SplineWarp2 Spotlight Stabilize2D StarField TVIscale Text Text2 TextureFile TimeBlend TimeShift TimeToDepth ToDeep Tracker Tracker3 Tracker4 Tracker4 Transform3D Trilinear Twist TwistGeo UI_Silver UI_Standard UnmultColor Unwrap UpRez VectorBlur VectorBlur2 ViewerProcess_None ViewerProcess_rec709 ViewerProcess_sRGB ZBlur ZComp ZDefocus ZDefocus2 ZDefocus2 ZFDefocus ZRMerge ZoomTV achannels allchars autocrop cache_clear cache_report color_nodes create_read date default_font_pathname drop formats goofy_title goto_frame import_action import_adobe_lut import_boujou import_chan import_discreet_lut import_sequence infoviewer load_all_plugins makescratch mov32Reader mov32Writer node_delete nukev objReaderObj remove_inputs script_command script_data script_info script_version_up select_by_name showname start topnode version_down version_up}}
 addUserKnob {22 get_tools_menu l "update menu" -STARTLINE T "import os\nimport re\n\nnkPath = re.split( '/|\"\"' , nuke.EXE_PATH )\nnkPath.pop()\nnkPath += \['plugins']\nnkPath = os.sep.join( nkPath )\n\nthisGRP = nuke.thisGroup()\nfileEXT = thisGRP\['fileEXT'].value().split(',')\nblacklist = thisGRP\['blacklist'].value().split(',')\nwhitelist = thisGRP\['whitelist'].value().split(',')\n\ntools = \[]\nfor file in os.listdir( nkPath ) :\n\tif os.path.isfile( nkPath+os.sep+file ) :\n\t\tif file.split('.')\[1] in fileEXT and file.split('.')\[0] not in blacklist :\n\t\t\ttools.append( file.split('.')\[0] )\ntools += whitelist\ntools.sort()\n\nthisGRP\['node'].setValues( tools )\nthisGRP\['total_count'].setValue( str(len(tools)) )\n\n"}
 addUserKnob {26 total_count l "<font color=orange>Total : </font>" -STARTLINE T 235}
 addUserKnob {22 create l "<b>\[--- create node ---]</b>" T "import random\n\nthisGRP = nuke.thisGroup()\n\ntry :\n\tgoStore = nuke.toNode('store')\n\tgoStore\['fn'].execute()\n\n\txspace = int( nuke.toNode('preferences')\['GridWidth'].getValue() )\n\twith getLevel() :\n\t\tmakeNode = nuke.createNode( thisGRP\['node'].value() )\n\t\tmakeNode.setXYpos( thisGRP.xpos() + xspace + random.randint(0,xspace) , thisGRP.ypos() )\n\t\tmakeNode.hideControlPanel()\nexcept :\n\tnukescripts.script_command( thisGRP\['node'].value() )" +STARTLINE}
 addUserKnob {26 spacer l "" +STARTLINE T <br>}
 addUserKnob {43 favorite +DISABLED}
 addUserKnob {22 unlock_favorite l unlock -STARTLINE T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\nlockMisc( 'favorite' )"}
 addUserKnob {3 favorite_status l "" -STARTLINE +INVISIBLE}
 addUserKnob {6 sort l "sort by alphabet" +STARTLINE}
 addUserKnob {22 add_favorite l "add to favorite" T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\naddItem( 'favorite' )" +STARTLINE}
 addUserKnob {22 remove_favorite l "remove from favorite" -STARTLINE T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\nremoveListItem( 'favorite' )"}
 addUserKnob {22 reset_favorite l "reset favorite" -STARTLINE T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\nreset( 'favorite' )"}
 addUserKnob {22 fav_access l "<b>\[--- create quick access node ---]</b>" T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\ngenFav()" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {20 filter_list_menu l "filter list menu" n 1}
 filter_list_menu 0
 addUserKnob {26 title_blacklist l blacklist}
 addUserKnob {22 add_blacklist l "add to blacklist" T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\naddItem( 'blacklist' )" +STARTLINE}
 addUserKnob {22 remove_blacklist l "remove from blacklist" -STARTLINE T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\nremoveListItem( 'blacklist' )"}
 addUserKnob {22 reset_blacklist l "reset blacklist" -STARTLINE T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\nreset( 'blacklist' )"}
 addUserKnob {26 title_whitelist l whitelist}
 addUserKnob {22 add_whitelist l "add to whitelist" T "thisGRP = nuke.thisGroup()\nif len( thisGRP\['whitelist'].value() ) :\n\twhitelist = thisGRP\['whitelist'].value().split(',')\nelse :\n\twhitelist = \[]\n\np = nuke.Panel('Add to Whitelist :')\np.addSingleLineInput('node class : ', '')\np.setWidth(300)\n\nif p.show() :\n\tinClass = p.value('node class : ')\n\tif len( inClass ) :\n\t\tif inClass not in whitelist :\n\t\t\twhitelist.append( inClass )\n\n\t\twhitelist.sort()\n\n\t\tthisGRP\['whitelist'].setValue( ','.join(whitelist) )\n\telse :\n\t\tnuke.message('Entry is empty. Process denied...')" +STARTLINE}
 addUserKnob {22 remove_whitelist l "remove from whitelist" -STARTLINE T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\nremoveListItem( 'whitelist' )"}
 addUserKnob {22 reset_whitelist l "reset whitelist" -STARTLINE T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\nreset( 'whitelist' )"}
 addUserKnob {20 endGroup n -1}
 addUserKnob {20 tab_misc l Misc}
 addUserKnob {1 fileEXT l "file extension" +DISABLED}
 fileEXT gizmo,so,tcl,dll
 addUserKnob {22 unlock_fileEXT l unlock -STARTLINE T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\nlockMisc( 'fileEXT' )"}
 addUserKnob {3 fileEXT_status l "" -STARTLINE +INVISIBLE}
 addUserKnob {43 blacklist +DISABLED}
 blacklist Add,AddChannels,AddMix,AddTimeCode,AdjBBox,Alembic_In,AmbientOcclusion,Anaglyph,Append2,ApplyMaterial,BasicMaterial,BlackOutside,Blend,BlendMat,BlinkScript,BumpBoss,CCrosstalk,CHueCorrect,CMSTestPattern,CameraTracker,Card3D,ChannelCopy,ChannelMerge,Clamp,ClipTest,ColorBars,ColorCorrect,ColorLookup,ColorMatrix,ColorTransfer,ColorWheel,Colorspace,CompareMetaData,Constant,ContactSheet,Copy,CopyBBox,CopyMetaData,CopyRectangle,CornerPin2D,Crop,CrosstalkGeo,Cube,CurveTool,Cylinder,DecalMat,DeepCrop,DeepFromFrames,DeepFromImage,DeepRead,DeepRecolor,DeepReformat,DeepSample,DeepToPoints,DeepTransform,DeepWrite,Defocus,DegrainBlue,DegrainSimple,DepthToPoints,DepthToPosition,Difference,Diffuse,Dilate,Direct,DirectLight,DiskCache,DisplaceGeo,Displacement,Dissolve,Dither,DropShadow,DustBust,EXPTool,EdgeBlur,EdgeDetectWrapper,EdgeExtend,EditClip,EditGeo,Emboss,Emission,Environment,Erode,FillMat,FilterErode,Flare,FrameBlend,FrameSelect,Gamma,GenerateLUT,Glint,Glow,Glow2,GodRays,Grade,Greyscale,Grid,GridWarpTracker,HSVTool,HistEQ,HueCorrect,HueKeyer,HueShift,IDistort,IDistort2,Invert,Keyer,Keyer2,Keymix,Kronos,Laplacian,LayerContactSheet,LayerCopy,LightWrap,Log2Lin,LookupGeo,MarkerRemoval,MatchGrade,MaterialGeo,Median,MergeMat,MinColor,MixViews,ModelBuilder,ModifyMetaData,ModifyRIB,MotionBlur,MotionBlur2D,MotionBlur3D,Multiply,No-op,NoTimeBlend,Noise,Normals,OCIOCDLTransform,OCIOColorSpace,OCIODisplay,OCIOFileTransform,OCIOLogConvert,OCIOLookTransform,OFlow2,OneView,ParticleAttractToSphere,ParticleBlinkScript,ParticleBounce,ParticleColorByAge,ParticleConstrainToSphere,ParticleCurve,ParticleCylinderFlow,ParticleDirection,ParticleDirectionalForce,ParticleDistributeSphere,ParticleDrag,ParticleEmitter,ParticleExpression,ParticleFlock,ParticleFuse,ParticleGravity,ParticleGrid,ParticleHelixFlow,ParticleInfo,ParticleKill,ParticleLookAt,ParticleMerge,ParticleMotionAlign,ParticlePointForce,ParticleProjectDisplace,ParticleProjectImage,ParticleSettings,ParticleShockWave,ParticleSpawn,ParticleSpeedLimit,ParticleTurbulence,ParticleVortex,ParticleWind,Phong,PointCloudGenerator,PointsTo3D,PoissonMesh,Position,Premult,PrmanRender,ProcGeo,ProceduralNoise,Radial,RadialDistort,Ramp,RayRender,ReLight,Reflection,Reformat,Refraction,Remove,Retime,RolloffContrast,STMap,Sampler,Saturation,ScanlineRender,ScannedGrain,Scene,Sharpen,ShuffleViews,SideBySide,SmartVector,SoftClip,Soften,Sparkles,Specular,Sphere,Spot,StabTrack,StartTimeBlur,TemporalMedian,Tile,TimeBlur,TimeDissolve,TimeEcho,TimeWarp,Toe2,Transcode,Transform,TransformMasked,Transmission,UIchooser,UVProject,UVTile2,Ultimatte,Unpremult,VFInterpGeo,VFTransformGeo,VectorCornerPin,VectorDistort,VectorGenerator,VectorToMotion,Vectorfield,ViewerProcess_1DLUT,VolumeRays,Wireframe,ZMerge,ZSlice,abcReader,abcWriter,add32p,animation_expressions,animation_filter,animation_generate,animation_loop,animation_move,animation_negate,animation_reverse,ariReader,arriReader,arxReader,auto_connect,autocolor,autocolor_add,autocolor_node,autolabel,autolabel_node,aviReader,aviWriter,basename,branch,cam_ver_panel,camera_down,camera_up,camera_ver,cdfReaderDeep,cdfWriterDeep,cinReader,cinWriter,copy_gizmo_to_group,copy_knobs,copy_to_group,cr2Reader,create_curve,crwReader,declone,deepshadReaderDeep,dngReader,dpxReader,dpxWriter,dshdReaderDeep,dtexReaderDeep,execute_panel,export_ascii,export_chan,export_chan_file,export_chan_menu,export_discreet_lut,exrReader,exrReaderDeep,exrWriter,exrWriterDeep,extract,fbxReader,fbxWriter,ffmpegReader,ffmpegWriter,filter_multiple,fixclone,flipbook,fpiReader,fpiWriter,ftifReader,ftifWriter,ftiffReader,ftiffWriter,get_reads,getenv,gifReader,hdrReader,hdrWriter,hdriReader,hdriWriter,iffReader,import_ascii,import_chan_button,import_chan_file,import_chan_menu,import_discreet,init,invert,it8,jpegReader,jpegWriter,jpgReader,jpgWriter,lset,m4vReader,m4vWriter,max_curve,min_curve,mov64Reader,mov64Writer,movReader,movWriter,mp4Reader,mp4Writer,mxfReader,mxfWriter,nfb_this,nilWriter,nkReader,nkcReader,nkncReader,node_copypaste,node_cutpaste,node_status,nullWriter,objReader,objWriter,parray,paste_to_selected,picReader,picWriter,png16Writer,pngReader,pngWriter,psdReader,pstack,pxdtexReaderDeep,r3dReader,read_file,remove32p,renderfarm_example,rgbReader,rgbWriter,rgbaReader,rgbaWriter,rgbeReader,rgbeWriter,rgbeaReader,rgbeaWriter,rlaReader,scroll_scr,search_plugins,search_replace,select_similar,setenv,sgi16Reader,sgi16Writer,sgiReader,sgiWriter,swapAB,sxrReader,sxrWriter,targaReader,targaWriter,texReaderDeep,tgaReader,tgaWriter,tif16Reader,tif16Writer,tifReader,tifWriter,tiff16Reader,tiff16Writer,tiffReader,tiffWriter,toggle,toolbars,unsetenv,update_plugin_menu,version_get,version_latest,version_set,write_file,xpmReader,xpmWriter,yuvReader,yuvWriter
 addUserKnob {22 unlock_blacklist l unlock -STARTLINE T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\nlockMisc( 'blacklist' )"}
 addUserKnob {3 blacklist_status l "" -STARTLINE +INVISIBLE}
 addUserKnob {43 whitelist +DISABLED}
 whitelist Axis,Camera,Denoise,Light,OFlow,ReadGeo,Shuffle
 addUserKnob {22 unlock_whitelist l unlock -STARTLINE T "goStore = nuke.toNode('store')\ngoStore\['fn'].execute()\nlockMisc( 'whitelist' )"}
 addUserKnob {3 whitelist_status l "" -STARTLINE +INVISIBLE}
 addUserKnob {20 t_VERSION l Version}
 addUserKnob {26 l_VERSION l Version T 1.1}
 addUserKnob {26 l_DATE l "Date Modified" T 2020-03-06}
 addUserKnob {22 btn_CHANGELOG l Changelog T "log = \"1.1<br>-&nbsp;blacklist&nbsp;filter&nbsp;updated<br><br>1.0<br>-&nbsp;easy&nbsp;access&nbsp;nuke's&nbsp;hidden/old&nbsp;nodes\"\nnuke.message( log )" +STARTLINE}
 addUserKnob {26 l_DEV l "Developed by" T "<a href='https://facebook.com/MJTLab'><font color='orange'>Mark Joey Tang</font></a>"}
}
 NoOp {
  inputs 0
  name store
  selected true
  xpos -45
  ypos -36
  addUserKnob {20 User}
  addUserKnob {22 fn T "import random\n\ndef getLevel() :\n\t### level define ###\n\tif len(nuke.thisNode().fullName().split('.')) == 1 :\n\t\t  ggLevel = nuke.root()\n\telse :\n\t\t  nodePath = nuke.thisNode().fullName().split('.')\n\t\t  nodePath.pop()\n\t\t  ggLevel = nuke.toNode('.'.join( nodePath ))\n\treturn ggLevel\n\n##########\n\ndef lockMisc( _mainName ) :\n\tthisGRP = nuke.thisGroup()\n\tif thisGRP\['\{0\}_status'.format( _mainName )].getValue() :\n\t\tthisGRP\[_mainName].setEnabled(False)\n\t\tthisGRP\['\{0\}_status'.format( _mainName )].setValue(0)\n\t\tthisGRP\['unlock_\{0\}'.format( _mainName )].setLabel( 'unlock' )\n\telse :\n\t\tthisGRP\[_mainName].setEnabled(True)\n\t\tthisGRP\['\{0\}_status'.format( _mainName )].setValue(1)\n\t\tthisGRP\['unlock_\{0\}'.format( _mainName )].setLabel( 'lock' )\n\n##########\n\ndef removeListItem( _mainName ) :\n\tthisGRP = nuke.thisGroup()\n\titemList = thisGRP\[_mainName].value().split(',')\n\n\tif len( itemList\[0] ) :\n\t\tp = nuke.Panel( 'Remove from \{0\} :'.format( _mainName ) )\n\t\tp.addEnumerationPulldown( 'select : ' , ' '.join( itemList ) )\n\t\tp.setWidth(300)\n\n\t\tif p.show() :\n\t\t\titemList.remove( p.value('select : ') )\n\t\t\titemList.sort()\n\t\t\tthisGRP\[_mainName].setValue( ','.join( itemList ) )\n\telse :\n\t\tnuke.message( '\{0\} list is empty.'.format( _mainName ) )\n\n##########\n\ndef reset( _mainName ) :\n\tif nuke.ask( 'Are you sure to reset the \{0\} ?'.format( _mainName ) ) :\n\t\tnuke.thisGroup()\[_mainName].setValue('')\n\n##########\n\ndef addItem( _mainName ) :\n\tthisGRP = nuke.thisGroup()\n\tif len( thisGRP\[_mainName].value() ) :\n\t\titemList = thisGRP\[_mainName].value().split(',')\n\telse :\n\t\titemList = \[]\n\n\tif thisGRP\['node'].value() not in itemList :\n\t\titemList.append( thisGRP\['node'].value() )\n\n\tif _mainName != 'favorite' :\n\t\titemList.sort()\n\telse :\n\t\tif thisGRP\['sort'].value() :\n\t\t\titemList.sort()\n\n\tthisGRP\[_mainName].setValue( ','.join( itemList ) )\n\n##########\n\ndef genFav() :\n\tthisGRP = nuke.thisGroup()\n\tif len( thisGRP\['favorite'].value() ) :\n\t\tfavList = thisGRP\['favorite'].value().split(',')\n\n\t\twith getLevel() :\n\t\t\tnkzGRP = makePackage( 'NukeZfav', favList , thisGRP )\n\telse :\n\t\tnuke.message('Nothing in favorite list. Process denied...')\n\n##########\n\ndef makePackage( _name , _favLS , _thisG ) :\n\tavailableName = findAvailableName( _name )\n\txspace = int( nuke.toNode('preferences')\['GridWidth'].getValue() )\n\tyspace = int( nuke.toNode('preferences')\['GridHeight'].getValue() )\n\n\t##### make group\n\tnewName = _name + '_' + str(availableName)\n\tnkzGRP = nuke.nodes.Group(\n\t\tname = newName , \n\t\ttile_color = int( _thisG\['tile_color'].getValue()) , \n\t\txpos = _thisG.xpos()+random.randint(0,xspace) , \n\t\typos = _thisG.ypos()+yspace+random.randint(0,yspace)\n\t\t)\n\n\tnkzGRP.addKnob( nuke.Tab_Knob( 'tab_myFavorite' , 'My favorite' ) )\n\tfor key,value in enumerate( _favLS ) :\n\t\tnkzGRP.addKnob( nuke.PyScript_Knob( value, value, \"goStore = nuke.toNode(\\'store\\')\\ngoStore\[\\'fn\\'].execute()\\ncreateNode( nuke.thisKnob().name() )\" ) )\n\t\tif key%3 == 0 :\n\t\t\tnkzGRP\[value].setFlag(0x00001000)\n\n\twith nkzGRP :\n\t\tsubstore = nuke.nodes.NoOp( name = 'store' )\n\t\tsubstore.addKnob( nuke.PyScript_Knob( 'fn' , 'fn' , \"import random\\ndef getLevel() :\\n\\tif len(nuke.thisNode().fullName().split(\\'.\\')) == 1 :\\n\\t\\t  ggLevel = nuke.root()\\n\\telse :\\n\\t\\t  nodePath = nuke.thisNode().fullName().split(\\'.\\')\\n\\t\\t  nodePath.pop()\\n\\t\\t  ggLevel = nuke.toNode(\\'.\\'.join( nodePath ))\\n\\treturn ggLevel\\ndef createNode( _mainName ) :\\n\\tthisGRP = nuke.thisGroup()\\n\\ttry :\\n\\t\\txspace = int( nuke.toNode(\\'preferences\\')\[\\'GridWidth\\'].getValue() )\\n\\t\\twith getLevel() :\\n\\t\\t\\tmakeNode = nuke.createNode( _mainName )\\n\\t\\t\\tmakeNode.setXYpos( thisGRP.xpos() + xspace + random.randint(0,xspace) , thisGRP.ypos() )\\n\\t\\t\\tmakeNode.hideControlPanel()\\n\\texcept :\\n\\t\\tnukescripts.script_command( _mainName )\" ) )\n\n\treturn nkzGRP\n\n##########\n\ndef findAvailableName( _name ) :\n\tfindName = 0\n\tdetectName = \[]\n\n\tfor node in nuke.allNodes():\n\t\tif node.name().split('_')\[0] == _name :\n\t\t\tdetectName.append(int(node.name().split('_')\[1]))\n\tdetectName.sort()\n\twhile detectName.count(findName) != 0 :\n\t\tfindName += 1\n\n\treturn findName" +STARTLINE}
 }
end_group
