Group {
 name ImagePlane3D
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() == 'inputChange':\n    n\['distanceAxis'].setVisible(n\[\"isOn\"].value())\n    n.knob('distance').setVisible(not n\[\"isOn\"].value())\n    \nif k.name() == 'result':\n    result = n.knob('result').getValue()\n    if result == 0:\n        n.knob('samples').setVisible(True)\n        n.knob('motionblur').setVisible(False)\n    elif result == 1 or result == 2 or result == 3 :\n        n.knob('samples').setVisible(False)\n        n.knob('motionblur').setVisible(True)\n"
 tile_color 0x634966ff
 label "dist: \[value distance]"
 note_font "DejaVu Sans"
 note_font_color 0xffffffff
 selected true
 addUserKnob {20 imagePlane3D l ImagePlane3D}
 addUserKnob {26 instructions l Instructions: T "1.) Choose preview (Result) method.\n2.) Set Ref Frame and Distance\n3.) Bake FrameRange\n4.) Export CornerPin\n\nUse this like cardToTrack, for exports\nNot recommended to be plugged into stream"}
 addUserKnob {26 text_1 l " " T " "}
 addUserKnob {4 output l "<b><font color=skyblue>Output:" M {Stabilize Matchmove "" "" ""}}
 addUserKnob {4 result l Result: M {"3D Projection Setup (slow, accurate)" "Card3D Setup (fast, inaccurate)" "Live (Reconcile3D) (fast, buggy)" "Baked (Cornerpin) (best)" "" "" "" "" "" "" "" ""}}
 addUserKnob {26 status l " Status:" T "<font color=salmon> Is NOT Baked"}
 addUserKnob {3 refFrame l "Ref Frame"}
 refFrame 1001
 addUserKnob {22 setRefFrame l "Set Ref Frame" -STARTLINE T "n = nuke.thisNode()\nref = n.knob('refFrame')\nframe = nuke.frame()\n\nref.setValue(frame)"}
 addUserKnob {1 operation +INVISIBLE}
 operation "\[value refFrame]"
 addUserKnob {7 distance l DistanceFromCam R 0 1000}
 distance 500
 addUserKnob {22 bakeFramerange l "<font color = lime>Bake FrameRange" T "import time\nimport threading\n\nn = nuke.thisNode()\n#Define this node\n\nstatus = n.knob(\"status\")\nresult = n.knob('result')\n\nr1 = nuke.toNode(\"Reconcile3DTL\")\nr2 = nuke.toNode(\"Reconcile3DTR\")\nr3 = nuke.toNode(\"Reconcile3DBL\")\nr4 = nuke.toNode(\"Reconcile3DBR\")\nrL = \[r1,r2,r3,r4]\n# Define reconcile3D nodes\n\n#bcg = n.knob(\"bakeColors\")\n\ncps = nuke.toNode(\"CornerPin2DBakedStabilize\")\ncpm = nuke.toNode(\"CornerPin2DBakedMatchmove\")\n# Define cornerpin node\n\nfirst_frame = int(nuke.Root()\['first_frame'].getValue())\nlast_frame = int(nuke.Root()\['last_frame'].getValue())\n# Grab first and last frame from root\n\np = nuke.Panel(\"Execute on FrameRange\")\np.addSingleLineInput('First Frame', first_frame)\np.addSingleLineInput('Last Frame', last_frame)\np.addSingleLineInput('Increment', 1)\nif p.show():\n# Create user input panel\n    \n    ff = int(p.value(\"First Frame\"))\n    lf = int(p.value(\"Last Frame\"))\n    i = int(p.value(\"Increment\"))\n    # Define first, last, increment from user input panel\n    \n    #k = \"status\"\n    l = \"<b> <font color=lime> Is Baked on Frames:\" + \" \" + str(ff) + \"-\" + str(lf)\n    status.setValue(l)\n    # Change status of node\n    \n    result.setValue(3)\n    \n    with n:\n        r1\[\"calc_output\"].setValue(0)\n        r2\[\"calc_output\"].setValue(0)\n        r3\[\"calc_output\"].setValue(0)\n        r4\[\"calc_output\"].setValue(0)\n        # turn off live status of reconcile3Ds\n        \n        r1\[\"output\"].clearAnimated()\n        r1\[\"outputxyz\"].clearAnimated()\n        r2\[\"output\"].clearAnimated()\n        r2\[\"outputxyz\"].clearAnimated()\n        r3\[\"output\"].clearAnimated()\n        r3\[\"outputxyz\"].clearAnimated()\n        r4\[\"output\"].clearAnimated()\n        r4\[\"outputxyz\"].clearAnimated()\n        # Clear any data from all Reconcile3D nodes\n    \n        def execute(first,last,inc):\n            runMe = True\n            while runMe == True:\n                nuke.execute(r1,first,last,inc)  \n                nuke.execute(r2,first,last,inc)\n                nuke.execute(r3,first,last,inc)\n                nuke.execute(r4,first,last,inc)\n                stop_event.set()\n                runMe = False\n                print 'Reconcile3Ds done'\n                break\n            # Define Reconcile3D execution function\n    \n        global stop_event \n        stop_event = threading.Event()\n        threading.Thread(target=execute, kwargs=dict(first=ff,last=lf,inc=i) ).start() \n        while not stop_event.is_set():\n            time.sleep(0.1)\n        # run Reconcile3Ds with threading\n    \n        cps\[\"from4\"].copyAnimations(r1\[\"output\"].animations())\n        cps\[\"from3\"].copyAnimations(r2\[\"output\"].animations())\n        cps\[\"from1\"].copyAnimations(r3\[\"output\"].animations())\n        cps\[\"from2\"].copyAnimations(r4\[\"output\"].animations())\n        \n        cpm\[\"to4\"].copyAnimations(r1\[\"output\"].animations())\n        cpm\[\"to3\"].copyAnimations(r2\[\"output\"].animations())\n        cpm\[\"to1\"].copyAnimations(r3\[\"output\"].animations())\n        cpm\[\"to2\"].copyAnimations(r4\[\"output\"].animations())\n        # copy reconcile3D values over to cornerpins\n        \n        r1\[\"output\"].clearAnimated()\n        r1\[\"outputxyz\"].clearAnimated()\n        r2\[\"output\"].clearAnimated()\n        r2\[\"outputxyz\"].clearAnimated()\n        r3\[\"output\"].clearAnimated()\n        r3\[\"outputxyz\"].clearAnimated()\n        r4\[\"output\"].clearAnimated()\n        r4\[\"outputxyz\"].clearAnimated()\n        # clear animation from live reconcile3Ds\n        \n        r1\[\"calc_output\"].setValue(1)\n        r2\[\"calc_output\"].setValue(1)\n        r3\[\"calc_output\"].setValue(1)\n        r4\[\"calc_output\"].setValue(1)\n        # make reconcile3ds live again\n    " +STARTLINE}
 addUserKnob {22 clearBaked l "<font color = orangered>Clear Baked" -STARTLINE T "n = nuke.thisNode()\nw = n.width()\nh = n.height()\nresult = n.knob('result')\n\ncps = nuke.toNode(\"CornerPin2DBakedStabilize\")\ncpm = nuke.toNode(\"CornerPin2DBakedMatchmove\")\nstatus = n.knob(\"status\")\n\ncpsfrom1 = cps.knob(\"from1\")\ncpsfrom2 = cps.knob(\"from2\")\ncpsfrom3 = cps.knob(\"from3\")\ncpsfrom4 = cps.knob(\"from4\")\n\ncpmto1 = cpm.knob(\"to1\")\ncpmto2 = cpm.knob(\"to2\")\ncpmto3 = cpm.knob(\"to3\")\ncpmto4 = cpm.knob(\"to4\")\n\ncpsfrom1.clearAnimated()\ncpsfrom2.clearAnimated()\ncpsfrom3.clearAnimated()\ncpsfrom4.clearAnimated()\ncpmto1.clearAnimated()\ncpmto2.clearAnimated()\ncpmto3.clearAnimated()\ncpmto4.clearAnimated()\n\ncpsfrom1.setValue(0,0)\ncpsfrom1.setValue(0,1)\ncpsfrom2.setValue(w,0)\ncpsfrom2.setValue(0,1)\ncpsfrom3.setValue(w,0)\ncpsfrom3.setValue(h,1)\ncpsfrom4.setValue(0,0)\ncpsfrom4.setValue(h,1)\n\ncpmto1.setValue(0,0)\ncpmto1.setValue(0,1)\ncpmto2.setValue(w,0)\ncpmto2.setValue(0,1)\ncpmto3.setValue(w,0)\ncpmto3.setValue(h,1)\ncpmto4.setValue(0,0)\ncpmto4.setValue(h,1)\n\nstatus.setValue(\"<font color=salmon> Is NOT Baked\")\nresult.setValue(2)"}
 addUserKnob {22 exportBakedTrack l "<font color = violet>Export Baked CornerPin" T "n = nuke.thisNode()\n\ncps = nuke.toNode(\"CornerPin2DBakedStabilize\")\ncpsName = str(n.name())\nrefFrame = int(n.knob(\"refFrame\").value())\ndist = n.knob(\"distance\").value()\noutput = n.knob('output').getValue()\n\ncpsfrom1 = cps.knob(\"from1\")\ncpsfrom2 = cps.knob(\"from2\")\ncpsfrom3 = cps.knob(\"from3\")\ncpsfrom4 = cps.knob(\"from4\")\n\ncpsto1 = cps.knob(\"to1\")\ncpsto2 = cps.knob(\"to2\")\ncpsto3 = cps.knob(\"to3\")\ncpsto4 = cps.knob(\"to4\")\n\nwith nuke.Root():\n    posX = n.knob(\"xpos\").value()\n    posY = n.knob(\"ypos\").value()\n    nukescripts.clear_selection_recursive()\n    \n    cpn = None\n    \n    try: \n        cpn = nuke.createNode('CProject')\n        cpn.setName(\"CP_\" + cpsName + \"_\")\n        cpn.knob('xpos').setValue(posX +100)\n        cpn.knob('ypos').setValue(posY +70)\n        cpn.autoplace()\n        cpn.setInput(0, None)\n        \n        cpnto1 = cpn.knob('to1')\n        cpnto2 = cpn.knob('to2')\n        cpnto3 = cpn.knob('to3')\n        cpnto4 = cpn.knob('to4')\n        \n        cpnfrom1 = cpn.knob('from1')\n        cpnfrom2 = cpn.knob('from2')\n        cpnfrom3 = cpn.knob('from3')\n        cpnfrom4 = cpn.knob('from4')\n        \n        cpn.knob('refFrame').setValue(refFrame)\n        \n        cpnto1.copyAnimations(cpsfrom1.animations())\n        cpnto2.copyAnimations(cpsfrom2.animations())\n        cpnto3.copyAnimations(cpsfrom3.animations())\n        cpnto4.copyAnimations(cpsfrom4.animations())\n        \n        cpnfrom1.setValue(cpsto1.getValueAt(refFrame))\n        cpnfrom2.setValue(cpsto2.getValueAt(refFrame))\n        cpnfrom3.setValue(cpsto3.getValueAt(refFrame))\n        cpnfrom4.setValue(cpsto4.getValueAt(refFrame))\n        \n        cpn.knob('note_font_size').setValue(11)\n        cpn\['label'].setValue('dist: \{\}'.format(dist))\n        cpn.knob('stabilize').setValue(1)\n        cpn.knob('stabilize').setValue(1-output)\n        cpn.knob('element').setValue(cpsName)\n        \n    except RuntimeError:\n        pass\n    \n    if not cpn:\n        cpn = nuke.createNode('CornerPin2D')\n        cpn.setName(cpsName + \"_CnrPin\")\n        cpn.knob('xpos').setValue(posX +100)\n        cpn.knob('ypos').setValue(posY +70)\n        cpn.autoplace()\n        cpn.setInput(0, None)\n        \n        cpnto1 = cpn.knob('to1')\n        cpnto2 = cpn.knob('to2')\n        cpnto3 = cpn.knob('to3')\n        cpnto4 = cpn.knob('to4')\n        \n        cpnfrom1 = cpn.knob('from1')\n        cpnfrom2 = cpn.knob('from2')\n        cpnfrom3 = cpn.knob('from3')\n        cpnfrom4 = cpn.knob('from4')\n        \n        cpnfrom1.copyAnimations(cpsfrom1.animations())\n        cpnfrom2.copyAnimations(cpsfrom2.animations())\n        cpnfrom3.copyAnimations(cpsfrom3.animations())\n        cpnfrom4.copyAnimations(cpsfrom4.animations())\n        \n        tab = nuke.Tab_Knob('settings', 'Settings')\n        \n        setCurrentFrameBtn = nuke.PyScript_Knob(\"setCurrentFrame\", \"Set to Current Frame\")\n        setCurrentFrameBtn.setCommand('n = nuke.thisNode()\\nrefFrame = n.knob(\"refFrame\")\\nrefFrame.setValue(nuke.frame())\\nrefFrame = refFrame.getValue()\\noutput = n.knob(\"output\")\\nto1 = n.knob(\"to1\")\\nto2 = n.knob(\"to2\")\\nto3 = n.knob(\"to3\")\\nto4 = n.knob(\"to4\")\\nfrom1 = n.knob(\"from1\")\\nfrom2 = n.knob(\"from2\")\\nfrom3 = n.knob(\"from3\")\\nfrom4 = n.knob(\"from4\")\\nif output.getValue() == 0:\\n    to1.setValue(from1.getValueAt(refFrame))\\n    to2.setValue(from2.getValueAt(refFrame))\\n    to3.setValue(from3.getValueAt(refFrame))\\n    to4.setValue(from4.getValueAt(refFrame))\\nif output.getValue() == 1:\\n    from1.setValue(to1.getValueAt(refFrame))\\n    from2.setValue(to2.getValueAt(refFrame))\\n    from3.setValue(to3.getValueAt(refFrame))\\n    from4.setValue(to4.getValueAt(refFrame))')\n        \n        setFrameBtn = nuke.PyScript_Knob('setFrame', 'Set Frame')\n        setFrameBtn.setCommand('n = nuke.thisNode()\\nrefFrame = n.knob(\\\"refFrame\\\").getValue()\\noutput = n.knob(\\\"output\\\")\\nto1 = n.knob(\\\"to1\\\")\\nto2 = n.knob(\\\"to2\\\")\\nto3 = n.knob(\\\"to3\\\")\\nto4 = n.knob(\\\"to4\\\")\\nfrom1 = n.knob(\\\"from1\\\")\\nfrom2 = n.knob(\\\"from2\\\")\\nfrom3 = n.knob(\\\"from3\\\")\\nfrom4 = n.knob(\\\"from4\\\")\\nif output.getValue() == 0:\\n    to1.setValue(from1.getValueAt(refFrame))\\n    to2.setValue(from2.getValueAt(refFrame))\\n    to3.setValue(from3.getValueAt(refFrame))\\n    to4.setValue(from4.getValueAt(refFrame))\\nif output.getValue() == 1:\\n    from1.setValue(to1.getValueAt(refFrame))\\n    from2.setValue(to2.getValueAt(refFrame))\\n    from3.setValue(to3.getValueAt(refFrame))\\n    from4.setValue(to4.getValueAt(refFrame))')\n        \n        StabBtn = nuke.PyScript_Knob(\"stabilize\", \"<font color=lime>Stabilize\")\n        StabBtn.setFlag(nuke.STARTLINE)\n        StabBtn.setCommand('n = nuke.thisNode()\\nstab = n.knob(\"stabilize\")\\nmatch = n.knob(\"matchmove\")\\noutput = n.knob(\"output\")\\nrefFrame = n.knob(\"refFrame\").getValue()\\nif output.getValue() == 1:\\n    stab.setLabel(\"<font color=lime>Stabilize\")\\n    match.setLabel(\"<font color=salmon>Matchmove\")\\n    to1 = n.knob(\"to1\")\\n    to2 = n.knob(\"to2\")\\n    to3 = n.knob(\"to3\")\\n    to4 = n.knob(\"to4\")\\n    from1 = n.knob(\"from1\")\\n    from2 = n.knob(\"from2\")\\n    from3 = n.knob(\"from3\")\\n    from4 = n.knob(\"from4\")\\n    from1.copyAnimations(to1.animations())\\n    from2.copyAnimations(to2.animations())\\n    from3.copyAnimations(to3.animations())\\n    from4.copyAnimations(to4.animations())\\n    to1.clearAnimated()\\n    to2.clearAnimated()\\n    to3.clearAnimated()\\n    to4.clearAnimated()\\n    to1.setValue(from1.getValueAt(refFrame))\\n    to2.setValue(from2.getValueAt(refFrame))\\n    to3.setValue(from3.getValueAt(refFrame))\\n    to4.setValue(from4.getValueAt(refFrame))\\n    output.setValue(0)')\n        \n        MatchBtn = nuke.PyScript_Knob(\"matchmove\", \"<font color=salmon>Matchmove\")\n        MatchBtn.setCommand('n = nuke.thisNode()\\nstab = n.knob(\"stabilize\")\\nmatch = n.knob(\"matchmove\")\\noutput = n.knob(\"output\")\\nrefFrame = n.knob(\"refFrame\").getValue()\\nif output.getValue() == 0:\\n    stab.setLabel(\"<font color=salmon>Stabilize\")\\n    match.setLabel(\"<font color=lime>Matchmove\")\\n    to1 = n.knob(\"to1\")\\n    to2 = n.knob(\"to2\")\\n    to3 = n.knob(\"to3\")\\n    to4 = n.knob(\"to4\")\\n    from1 = n.knob(\"from1\")\\n    from2 = n.knob(\"from2\")\\n    from3 = n.knob(\"from3\")\\n    from4 = n.knob(\"from4\")\\n    to1.copyAnimations(from1.animations())\\n    to2.copyAnimations(from2.animations())\\n    to3.copyAnimations(from3.animations())\\n    to4.copyAnimations(from4.animations())\\n    from1.clearAnimated()\\n    from2.clearAnimated()\\n    from3.clearAnimated()\\n    from4.clearAnimated()\\n    from1.setValue(to1.getValueAt(refFrame))\\n    from2.setValue(to2.getValueAt(refFrame))\\n    from3.setValue(to3.getValueAt(refFrame))\\n    from4.setValue(to4.getValueAt(refFrame))\\n    output.setValue(1)')\n        \n        pulldownStatus = nuke.Enumeration_Knob('output', 'Output', \['Stabilized', 'Matchmoved'])\n        \n        intFrame = nuke.Int_Knob(\"refFrame\", \"Ref Frame\")\n        intFrame.setFlag(nuke.STARTLINE)\n        cpn.addKnob(tab)\n        \n        cpn.addKnob(setCurrentFrameBtn)\n        cpn.addKnob(intFrame)\n        cpn.knob(\"refFrame\").setValue(refFrame)\n        \n        cpn.addKnob(setFrameBtn)\n        \n        cpn.addKnob(StabBtn)\n        cpn.addKnob(MatchBtn)\n        \n        cpn.addKnob(pulldownStatus)\n        cpn.knob('output').setVisible(False)\n        \n        cpnto1.setValue(cpnfrom1.getValueAt(refFrame))\n        cpnto2.setValue(cpnfrom2.getValueAt(refFrame))\n        cpnto3.setValue(cpnfrom3.getValueAt(refFrame))\n        cpnto4.setValue(cpnfrom4.getValueAt(refFrame))\n        \n        cpn\['label'].setValue('rf: \[value refFrame] dist: \{\}'.format(dist))\n        " +STARTLINE}
 addUserKnob {22 exportLinkedTrack l "<font color = violet>Export Linked CornerPin" -STARTLINE T "n = nuke.thisNode()\n\ncps = nuke.toNode(\"CornerPin2DBakedStabilize\")\nnName = str(n.name())\ncpsName = str(cps.name())\nrefFrame = int(n.knob(\"refFrame\").value())\ndist = n.knob(\"distance\").value()\noutput = n.knob('output').getValue()\n\ncpsfrom1 = cps.knob(\"from1\")\ncpsfrom2 = cps.knob(\"from2\")\ncpsfrom3 = cps.knob(\"from3\")\ncpsfrom4 = cps.knob(\"from4\")\n\nwith nuke.Root():\n    posX = n.knob(\"xpos\").value()\n    posY = n.knob(\"ypos\").value()\n    \n\n    cpn = None\n    try: \n        cpn = nuke.createNode('CProject')\n        cpn.setName(\"CP_\" + nName + \"_\")\n        cpn.knob('xpos').setValue(posX +100)\n        cpn.knob('ypos').setValue(posY +70)\n        cpn.autoplace()\n        cpn.setInput(0, None)\n        \n        cpnto1 = cpn.knob('to1')\n        cpnto2 = cpn.knob('to2')\n        cpnto3 = cpn.knob('to3')\n        cpnto4 = cpn.knob('to4')\n        \n        cpnfrom1 = cpn.knob('from1')\n        cpnfrom2 = cpn.knob('from2')\n        cpnfrom3 = cpn.knob('from3')\n        cpnfrom4 = cpn.knob('from4')\n        \n        cpn.knob('refFrame').setValue(refFrame)\n        \n        cpnto1.setExpression(nName + \".\" + cpsName + \".\" + \"from1\")\n        cpnto2.setExpression(nName + \".\" + cpsName + \".\" + \"from2\")\n        cpnto3.setExpression(nName + \".\" + cpsName + \".\" + \"from3\")\n        cpnto4.setExpression(nName + \".\" + cpsName + \".\" + \"from4\")\n        \n        cpnfrom1.setExpression(nName + \".\" + cpsName + \".\" + \"to1\")\n        cpnfrom2.setExpression(nName + \".\" + cpsName + \".\" + \"to2\")\n        cpnfrom3.setExpression(nName + \".\" + cpsName + \".\" + \"to3\")\n        cpnfrom4.setExpression(nName + \".\" + cpsName + \".\" + \"to4\")\n    \n        \n        cpn.knob('note_font_size').setValue(11)\n        cpn\['label'].setValue('dist: \[value \{\}.distance]'.format(nName))\n        cpn.knob('stabilize').setValue(1)\n        cpn.knob('stabilize').setValue(1-output)\n        cpn.knob('element').setValue(nName)\n        \n        \n    except RuntimeError:\n        pass\n    \n    if not cpn:\n        cpn = nuke.createNode('CornerPin2D')\n        cpn.setName(nName + \"_CrnPn\")\n        cpn.knob('xpos').setValue(posX +100)\n        cpn.knob('ypos').setValue(posY +70)\n        cpn.autoplace()\n        cpn.setInput(0, None)\n        \n        cpnto1 = cpn.knob('to1')\n        cpnto2 = cpn.knob('to2')\n        cpnto3 = cpn.knob('to3')\n        cpnto4 = cpn.knob('to4')\n        \n        cpnfrom1 = cpn.knob('from1')\n        cpnfrom2 = cpn.knob('from2')\n        cpnfrom3 = cpn.knob('from3')\n        cpnfrom4 = cpn.knob('from4')\n        \n        cpnfrom1.setExpression(nName + \".\" + cpsName + \".\" + \"from1\")\n        cpnfrom2.setExpression(nName + \".\" + cpsName + \".\" + \"from2\")\n        cpnfrom3.setExpression(nName + \".\" + cpsName + \".\" + \"from3\")\n        cpnfrom4.setExpression(nName + \".\" + cpsName + \".\" + \"from4\")\n        \n        tab = nuke.Tab_Knob('settings', 'Settings')\n        \n        setCurrentFrameBtn = nuke.PyScript_Knob(\"setCurrentFrame\", \"Set to Current Frame\")\n        setCurrentFrameBtn.setCommand('n = nuke.thisNode()\\nrefFrame = n.knob(\"refFrame\")\\nrefFrame.setValue(nuke.frame())\\nrefFrame = refFrame.getValue()\\noutput = n.knob(\"output\")\\nto1 = n.knob(\"to1\")\\nto2 = n.knob(\"to2\")\\nto3 = n.knob(\"to3\")\\nto4 = n.knob(\"to4\")\\nfrom1 = n.knob(\"from1\")\\nfrom2 = n.knob(\"from2\")\\nfrom3 = n.knob(\"from3\")\\nfrom4 = n.knob(\"from4\")\\nif output.getValue() == 0:\\n    to1.setValue(from1.getValueAt(refFrame))\\n    to2.setValue(from2.getValueAt(refFrame))\\n    to3.setValue(from3.getValueAt(refFrame))\\n    to4.setValue(from4.getValueAt(refFrame))\\nif output.getValue() == 1:\\n    from1.setValue(to1.getValueAt(refFrame))\\n    from2.setValue(to2.getValueAt(refFrame))\\n    from3.setValue(to3.getValueAt(refFrame))\\n    from4.setValue(to4.getValueAt(refFrame))')\n        \n        setFrameBtn = nuke.PyScript_Knob('setFrame', 'Set Frame')\n        setFrameBtn.setCommand('n = nuke.thisNode()\\nrefFrame = n.knob(\\\"refFrame\\\").getValue()\\noutput = n.knob(\\\"output\\\")\\nto1 = n.knob(\\\"to1\\\")\\nto2 = n.knob(\\\"to2\\\")\\nto3 = n.knob(\\\"to3\\\")\\nto4 = n.knob(\\\"to4\\\")\\nfrom1 = n.knob(\\\"from1\\\")\\nfrom2 = n.knob(\\\"from2\\\")\\nfrom3 = n.knob(\\\"from3\\\")\\nfrom4 = n.knob(\\\"from4\\\")\\nif output.getValue() == 0:\\n    to1.setValue(from1.getValueAt(refFrame))\\n    to2.setValue(from2.getValueAt(refFrame))\\n    to3.setValue(from3.getValueAt(refFrame))\\n    to4.setValue(from4.getValueAt(refFrame))\\nif output.getValue() == 1:\\n    from1.setValue(to1.getValueAt(refFrame))\\n    from2.setValue(to2.getValueAt(refFrame))\\n    from3.setValue(to3.getValueAt(refFrame))\\n    from4.setValue(to4.getValueAt(refFrame))')\n        \n        StabBtn = nuke.PyScript_Knob(\"stabilize\", \"<font color=lime>Stabilize\")\n        StabBtn.setFlag(nuke.STARTLINE)\n        StabBtn.setCommand('n = nuke.thisNode()\\nstab = n.knob(\"stabilize\")\\nmatch = n.knob(\"matchmove\")\\noutput = n.knob(\"output\")\\nrefFrame = n.knob(\"refFrame\").getValue()\\nif output.getValue() == 1:\\n    stab.setLabel(\"<font color=lime>Stabilize\")\\n    match.setLabel(\"<font color=salmon>Matchmove\")\\n    to1 = n.knob(\"to1\")\\n    to2 = n.knob(\"to2\")\\n    to3 = n.knob(\"to3\")\\n    to4 = n.knob(\"to4\")\\n    from1 = n.knob(\"from1\")\\n    from2 = n.knob(\"from2\")\\n    from3 = n.knob(\"from3\")\\n    from4 = n.knob(\"from4\")\\n    from1.copyAnimations(to1.animations())\\n    from2.copyAnimations(to2.animations())\\n    from3.copyAnimations(to3.animations())\\n    from4.copyAnimations(to4.animations())\\n    to1.clearAnimated()\\n    to2.clearAnimated()\\n    to3.clearAnimated()\\n    to4.clearAnimated()\\n    to1.setValue(from1.getValueAt(refFrame))\\n    to2.setValue(from2.getValueAt(refFrame))\\n    to3.setValue(from3.getValueAt(refFrame))\\n    to4.setValue(from4.getValueAt(refFrame))\\n    output.setValue(0)')\n        \n        MatchBtn = nuke.PyScript_Knob(\"matchmove\", \"<font color=salmon>Matchmove\")\n        MatchBtn.setCommand('n = nuke.thisNode()\\nstab = n.knob(\"stabilize\")\\nmatch = n.knob(\"matchmove\")\\noutput = n.knob(\"output\")\\nrefFrame = n.knob(\"refFrame\").getValue()\\nif output.getValue() == 0:\\n    stab.setLabel(\"<font color=salmon>Stabilize\")\\n    match.setLabel(\"<font color=lime>Matchmove\")\\n    to1 = n.knob(\"to1\")\\n    to2 = n.knob(\"to2\")\\n    to3 = n.knob(\"to3\")\\n    to4 = n.knob(\"to4\")\\n    from1 = n.knob(\"from1\")\\n    from2 = n.knob(\"from2\")\\n    from3 = n.knob(\"from3\")\\n    from4 = n.knob(\"from4\")\\n    to1.copyAnimations(from1.animations())\\n    to2.copyAnimations(from2.animations())\\n    to3.copyAnimations(from3.animations())\\n    to4.copyAnimations(from4.animations())\\n    from1.clearAnimated()\\n    from2.clearAnimated()\\n    from3.clearAnimated()\\n    from4.clearAnimated()\\n    from1.setValue(to1.getValueAt(refFrame))\\n    from2.setValue(to2.getValueAt(refFrame))\\n    from3.setValue(to3.getValueAt(refFrame))\\n    from4.setValue(to4.getValueAt(refFrame))\\n    output.setValue(1)')\n    \n        pulldownStatus = nuke.Enumeration_Knob('output', 'Output', \['Stabilized', 'Matchmoved'])\n        \n        intFrame = nuke.Int_Knob(\"refFrame\", \"Ref Frame\")\n        intFrame.setFlag(nuke.STARTLINE)\n        cpn.addKnob(tab)\n        \n        cpn.addKnob(setCurrentFrameBtn)\n        cpn.addKnob(intFrame)\n        cpn.knob(\"refFrame\").setValue(refFrame)\n        \n        cpn.addKnob(setFrameBtn)\n        \n        cpn.addKnob(StabBtn)\n        cpn.addKnob(MatchBtn)\n        \n        cpn.addKnob(pulldownStatus)\n        cpn.knob('output').setVisible(False)\n        \n        cpnto1.setValue(cpnfrom1.getValueAt(refFrame))\n        cpnto2.setValue(cpnfrom2.getValueAt(refFrame))\n        cpnto3.setValue(cpnfrom3.getValueAt(refFrame))\n        cpnto4.setValue(cpnfrom4.getValueAt(refFrame))\n        \n        cpn\['label'].setValue('rf: \[value refFrame] dist: \{\}'.format(dist))"}
 addUserKnob {41 isOn +INVISIBLE T isON.isOn}
 addUserKnob {7 distanceAxis l DistanceToAxis +HIDDEN R 0 1000}
 distanceAxis {{AxisDistance.NoOp1.distance}}
 addUserKnob {26 overscanSettings l "<b><font color=skyblue>Overscan"}
 addUserKnob {7 overscan l Overscan R 0 200}
 addUserKnob {26 mBlurSettings l "<b><font color=skyblue>MotionBlur"}
 addUserKnob {7 samples R 1 10}
 samples 1
 addUserKnob {7 motionblur +HIDDEN}
 addUserKnob {7 shutter R 0 2}
 shutter 0.5
 addUserKnob {41 shutteroffset l "shutter offset" T TimeBlur.shutteroffset}
 addUserKnob {26 text l " " T " "}
 addUserKnob {26 info l " " T "<span style=\"color:#666\"><b>ImagePlane3D v2.0</b> | <a style=\"color:#666;text-decoration: none;\">Tony Lyons</a> 2021</span>"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x57614e00
  label Live
  note_font_size 60
  note_font_color 0xffffffff
  xpos 1893
  ypos 398
  bdwidth 301
  bdheight 350
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x3c472700
  label Baked
  note_font_size 60
  note_font_color 0xffffffff
  xpos 2354
  ypos 382
  bdwidth 300
  bdheight 358
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0x5e443cff
  label Card3D
  note_font_size 100
  note_font_color 0xffffffff
  xpos 1129
  ypos -908
  bdwidth 400
  bdheight 1690
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0x686b5900
  label "Projection 3D setup"
  note_font_size 60
  note_font_color 0xffffffff
  xpos -13
  ypos -827
  bdwidth 735
  bdheight 1748
 }
 BackdropNode {
  inputs 0
  name BackdropNode5
  tile_color 0x44573100
  label "Corners of Cards \nfor Reconcile 3D"
  note_font_size 60
  note_font_color 0xffffffff
  xpos 1771
  ypos -1109
  bdwidth 763
  bdheight 1355
 }
 BackdropNode {
  inputs 0
  name BackdropNode6
  tile_color 0x555f6b00
  label "input cam"
  note_font_size 60
  note_font_color 0xffffffff
  xpos 929
  ypos -1247
  bdwidth 267
  bdheight 232
 }
 BackdropNode {
  inputs 0
  name BackdropNode8
  tile_color 0x4b5a2e00
  label Camera
  note_font_size 60
  note_font_color 0xffffffff
  xpos -638
  ypos -401
  bdwidth 442
  bdheight 1189
 }
 Input {
  inputs 0
  name Inputcam
  xpos -598
  ypos -300
  number 1
 }
set Nbe74dd00 [stack 0]
 Camera {
  projection_mode {{"\[value the_cam]projection_mode"}}
  focal {{"\[value \[value the_cam]focal]"}}
  haperture {{"\[value \[value the_cam]haperture]"}}
  vaperture {{"\[value \[value the_cam]vaperture]"}}
  near {{"\[value \[value the_cam]near]"}}
  far {{"\[value \[value the_cam]far]"}}
  win_translate {{"\[lindex \[value \[value the_cam]win_translate] 0]"} {"\[lindex \[value \[value the_cam]win_translate] 1]"}}
  win_scale {{"\[lindex \[value \[value the_cam]win_scale] 0]"} {"\[lindex \[value \[value the_cam]win_scale] 1]"}}
  winroll {{"\[value \[value the_cam]winroll]"}}
  focal_point {{"\[value \[value the_cam]focal_point]"}}
  fstop {{"\[value \[value the_cam]fstop]"}}
  name DummyCam
  help "DummyCam by Adrian Pueyo\n\nCamera that apart from the matrices also grabs all the \"Projection\" values from the upstream camera that it's connected to. Turns into a default Camera if not Camera connected.\n\nCan also be used inside of groups and gizmos, as many levels deep as you want :D\n\nAll using live and super fast TCL.\n\nadrianpueyo.com, 2019"
  onCreate "n = nuke.thisNode()\nfor k in \[\"projection_mode\",\"focal\",\"haperture\",\"vaperture\",\"near\",\"far\",\"win_translate\",\"win_scale\",\"winroll\",\"focal_point\",\"fstop\"]:\n    n\[k].setFlag(0x0000000010000000)"
  xpos 969
  ypos -1133
  addUserKnob {20 DummyCam l Defaults}
  addUserKnob {43 the_cam +INVISIBLE}
  the_cam "\[\nset the_knob \"focal\"\nset knob_index 0\nset starting_point \"this.input0\"\nset default \"this\"\nset default \[append default \".d_\"]\n\n# If cam has no inputs, return the default...\nif \{\[exists \$starting_point]\} \{\n    set x \[node \$starting_point]\n\} \{ \n    return \$default\n\}\n\nset finished 0\nwhile \{\$finished != 1\} \{\n\n    # First look for a Cam or Input or topnode.\n    while \{\[class \$x] != \"Camera2\" && \[class \$x] != \"Camera\" && \[class \$x] != \"Input\" && \$x != \[topnode \$x]\} \{\n        set x \[node \$x.input0]\n    \}\n\n    # Then, check if node is a cam (and return), and otherwise, if it's an input, see if the parent exists and move to it.\n    if \{\[class \$x]==\"Camera2\"||\[class \$x]==\"Camera\"\} \{\n        set x \[append x \".\"]\n        return \$x\n    \} \{ \n        if \{\[class \$x]==\"Input\"\} \{ \n            set inp \"\$x.parent.input\"\n            set inputNum \[value \$x.number]\n            set inp \[append inp \$inputNum]\n            if \{\[exists \$inp]\} \{\n                set x \[node \$inp]\n            \} \{ \n                set finished 1\n            \}\n        \} \{ \n            set finished 1\n        \}\n    \}\n\}\nreturn \$default\n]"
  addUserKnob {4 d_projection_mode l projection M {perspective orthographic uv spherical ""}}
  addUserKnob {7 d_focal l focal R 0 100}
  d_focal 60
  addUserKnob {7 d_haperture l "horiz aperture" R 0 50}
  d_haperture 24.576
  addUserKnob {7 d_vaperture l "vert aperture" R 0 50}
  d_vaperture 18.672
  addUserKnob {7 d_near l near R 0 10}
  d_near 0.1
  addUserKnob {7 d_far l far R 0 10000}
  d_far 10000
  addUserKnob {12 d_win_translate l "window translate"}
  addUserKnob {12 d_win_scale l "window scale"}
  d_win_scale {1 1}
  addUserKnob {7 d_winroll l "window roll" R 0 45}
  addUserKnob {7 d_focal_point l "focal distance" R 0 10}
  d_focal_point 2
  addUserKnob {7 d_fstop l fstop R 0 30}
  d_fstop 16
  addUserKnob {26 text l " " T "<span style=\"color:#666\"><br/><b>DummyCam v1.0</b> - <a href=\"http://www.adrianpueyo.com\" style=\"color:#666;text-decoration: none;\">adrianpueyo.com</a>, 2019</span>"}
 }
 Dot {
  name Dot27
  note_font_size 41
  xpos 993
  ypos -974
 }
set Nbe74cf00 [stack 0]
 Dot {
  name Dot23
  label cam
  note_font_size 41
  xpos 1317
  ypos -974
 }
 Axis2 {
  translate {0 0 {-parent.Settings.camDistance}}
  name CameraDistance
  label "dist to cam : \[value translate.z]"
  xpos 1293
  ypos -665
 }
 Axis2 {
  uniform_scale {{(DummyCam.haperture/DummyCam.focal)*Settings.camDistance}}
  name ScaleToFilmGateAxis
  label "uniform Scale : \[value uniform_scale]"
  xpos 1293
  ypos -539
 }
set Nc1507900 [stack 0]
 Axis2 {
  scaling {1 {DummyCam.vaperture/parent.DummyCam.haperture} 1}
  name AspectRatioScaleY
  label "scale Y : \[value scaling.y]"
  xpos 2131
  ypos -539
 }
 Dot {
  name Dot1
  note_font_size 41
  xpos 2155
  ypos -419
 }
set Nc1506b00 [stack 0]
 Card2 {
  inputs 0
  image_aspect false
  rows 4
  columns 4
  control_points {3 3 3 6 

1 {-0.5 -0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0 0 0} 
1 {0 -0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {0.5 0 0} 
1 {0.5 -0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666865 0} 0 {0 0 0} 0 {1 0 0} 
1 {-0.5 0 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0 0.5 0} 
1 {0 0 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {0.5 0.5 0} 
1 {0.5 0 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0.1666666716 0} 0 {0 -0.1666666716 0} 0 {1 0.5 0} 
1 {-0.5 0.5 0} 0 {0.1666666865 0 0} 0 {0 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0 1 0} 
1 {0 0.5 0} 0 {0.1666666716 0 0} 0 {-0.1666666716 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {0.5 1 0} 
1 {0.5 0.5 0} 0 {0 0 0} 0 {-0.1666666865 0 0} 0 {0 0 0} 0 {0 -0.1666666865 0} 0 {1 1 0} }
  name ProjectionPlane
  xpos 442
  ypos -505
 }
 TransformGeo {
  inputs 2
  name AlignProjectionPlane1
  xpos 442
  ypos -422
 }
 FrameHold {
  first_frame {{parent.refFrame}}
  name FrameHold1
  xpos 442
  ypos -345
 }
 Dot {
  name Dot10
  note_font_size 41
  xpos 476
  ypos -62
 }
set Nc1504800 [stack 0]
 Dot {
  name Dot16
  note_font_size 41
  xpos 296
  ypos -62
 }
 Dot {
  name Dot15
  note_font_size 41
  xpos 296
  ypos 1345
 }
 Input {
  inputs 0
  name Inputimg
  xpos 849
  ypos 174
 }
 Reformat {
  format {{{parent.input0.format}}}
  pbb true
  name Reformat1
  xpos 849
  ypos 250
 }
 Dot {
  name Dot12
  label img
  note_font_size 41
  xpos 883
  ypos 333
 }
set Nbfc3a400 [stack 0]
 Dot {
  name Dot7
  label img
  note_font_size 41
  xpos 1686
  ypos 333
 }
set Nbfc39d00 [stack 0]
 Dot {
  name Dot14
  note_font_size 41
  xpos 1967
  ypos 334
 }
set Nbfc39600 [stack 0]
 Dot {
  name Dot6
  label img
  note_font_size 41
  xpos 2428
  ypos 334
 }
 Dot {
  name Dot25
  note_font_size 41
  xpos 2428
  ypos 482
 }
set Nbfc38800 [stack 0]
 CornerPin2D {
  to1 {0 0}
  to2 {1920 0}
  to3 {1920 1080}
  to4 {0 1080}
  invert false
  motionblur {{parent.motionblur}}
  shutter {{parent.shutter}}
  shutteroffset {{parent.shutteroffset}}
  from1 {{to1(refFrame)} {to1(refFrame)}}
  from2 {{to2(refFrame)} {to2(refFrame)}}
  from3 {{to3(refFrame)} {to3(refFrame)}}
  from4 {{to4(refFrame)} {to4(refFrame)}}
  name CornerPin2DBakedMatchmove
  xpos 2535
  ypos 572
  addUserKnob {20 User}
  addUserKnob {22 "set reference frame" -STARTLINE T "import addOnCreateUU; addOnCreateUU.cornerPinZero()"}
 }
push $Nbfc38800
 CornerPin2D {
  to1 {{from1(refFrame)} {from1(refFrame)}}
  to2 {{from2(refFrame)} {from2(refFrame)}}
  to3 {{from3(refFrame)} {from3(refFrame)}}
  to4 {{from4(refFrame)} {from4(refFrame)}}
  invert false
  motionblur {{parent.motionblur}}
  shutter {{parent.shutter}}
  shutteroffset {{parent.shutteroffset}}
  from1 {0 0}
  from2 {1920 0}
  from3 {1920 1080}
  from4 {0 1080}
  name CornerPin2DBakedStabilize
  xpos 2394
  ypos 572
  addUserKnob {20 User}
  addUserKnob {22 "set reference frame" -STARTLINE T "import addOnCreateUU; addOnCreateUU.cornerPinZero()"}
 }
 Switch {
  inputs 2
  which {{output}}
  name Switch7
  xpos 2394
  ypos 650
 }
 Dot {
  name Dot22
  note_font_size 41
  xpos 2428
  ypos 1281
 }
push $Nbfc39600
 Dot {
  name Dot26
  note_font_size 41
  xpos 1967
  ypos 498
 }
set Nbfc1d600 [stack 0]
 CornerPin2D {
  to1 {{parent.Reconcile3DBL.output} {parent.Reconcile3DBL.output}}
  to2 {{parent.Reconcile3DBR.output} {parent.Reconcile3DBR.output}}
  to3 {{parent.Reconcile3DTR.output} {parent.Reconcile3DTR.output}}
  to4 {{parent.Reconcile3DTL.output} {parent.Reconcile3DTL.output}}
  invert false
  motionblur {{parent.motionblur}}
  shutter {{parent.shutter}}
  shutteroffset {{parent.shutteroffset}}
  from1 {{to1(refFrame)} {to1(refFrame)}}
  from2 {{to2(refFrame)} {to2(refFrame)}}
  from3 {{to3(refFrame)} {to3(refFrame)}}
  from4 {{to4(refFrame)} {to4(refFrame)}}
  name CornerPin2DLiveMatchmove
  xpos 2073
  ypos 582
  addUserKnob {20 User}
  addUserKnob {22 "set reference frame" -STARTLINE T "import addOnCreateUU; addOnCreateUU.cornerPinZero()"}
 }
push $Nbfc1d600
 CornerPin2D {
  to1 {{parent.Reconcile3DBL.output(refFrame)} {parent.Reconcile3DBL.output(refFrame)}}
  to2 {{parent.Reconcile3DBR.output(refFrame)} {parent.Reconcile3DBR.output(refFrame)}}
  to3 {{parent.Reconcile3DTR.output(refFrame)} {parent.Reconcile3DTR.output(refFrame)}}
  to4 {{parent.Reconcile3DTL.output(refFrame)} {parent.Reconcile3DTL.output(refFrame)}}
  invert false
  motionblur {{parent.motionblur}}
  shutter {{parent.shutter}}
  shutteroffset {{parent.shutteroffset}}
  from1 {{parent.Reconcile3DBL.output} {parent.Reconcile3DBL.output}}
  from2 {{parent.Reconcile3DBR.output} {parent.Reconcile3DBR.output}}
  from3 {{parent.Reconcile3DTR.output} {parent.Reconcile3DTR.output}}
  from4 {{parent.Reconcile3DTL.output} {parent.Reconcile3DTL.output}}
  name CornerPin2DLiveStabilize
  xpos 1933
  ypos 583
  addUserKnob {20 User}
  addUserKnob {22 "set reference frame" -STARTLINE T "import addOnCreateUU; addOnCreateUU.cornerPinZero()"}
 }
 Switch {
  inputs 2
  which {{output}}
  name Switch5
  xpos 1933
  ypos 644
 }
 Dot {
  name Dot3
  note_font_size 41
  xpos 1967
  ypos 785
 }
push $Nc1507900
 Dot {
  name Dot19
  note_font_size 41
  xpos 1317
  ypos -361
 }
set Nbfbf6400 [stack 0]
push $Nbfbf6400
 FrameHold {
  first_frame {{parent.refFrame}}
  name FrameHold4
  xpos 1418
  ypos -293
 }
 Switch {
  inputs 2
  which {{!output}}
  name Switch6
  label "\[value which]"
  xpos 1283
  ypos -224
 }
push $Nbe74dd00
 Dot {
  name Dot18
  note_font_size 41
  xpos -564
  ypos -54
 }
set Nbfbf4f00 [stack 0]
 Dot {
  name Dot4
  note_font_size 41
  xpos -564
  ypos 271
 }
set Nbfbf4800 [stack 0]
 FrameHold {
  first_frame {{parent.refFrame}}
  name FrameHold2
  xpos -454
  ypos 264
 }
set Nbfbf4100 [stack 0]
 Dot {
  name Dot13
  note_font_size 41
  xpos -420
  ypos 536
 }
push $Nbfbf4800
 Dot {
  name Dot11
  note_font_size 41
  xpos -564
  ypos 442
 }
set Nbfbcf200 [stack 0]
 Switch {
  inputs 2
  which {{!output}}
  name Switch3
  label "\[value which]"
  xpos -598
  ypos 529
 }
 Dot {
  name Dot8
  note_font_size 41
  xpos -564
  ypos 629
 }
set Nbfbce400 [stack 0]
push $Nbfc3a400
 Card3D {
  inputs 3
  translate {0 0 0}
  format {{{parent.Reformat1.format}}}
  shutter {{parent.shutter}}
  shutteroffset {{parent.shutteroffset}}
  name Card3D1
  xpos 1283
  ypos 625
 }
 Dot {
  name Dot9
  note_font_size 41
  xpos 1317
  ypos 725
 }
push $Nbfbce400
 Dot {
  name Dot5
  note_font_size 41
  xpos -564
  ypos 736
 }
push $Nbfbf4100
 Dot {
  name Dot24
  note_font_size 41
  xpos -282
  ypos 271
 }
push $Nbfbcf200
 Switch {
  inputs 2
  which {{output}}
  name Switch2
  label "\[value which]"
  xpos -316
  ypos 435
 }
push $Nbfc3a400
 Dot {
  name Dot29
  label img
  note_font_size 41
  xpos 626
  ypos 333
 }
 Project3D2 {
  inputs 2
  crop false
  name Project3D1
  xpos 592
  ypos 432
 }
 Dot {
  name Dot2
  note_font_size 41
  xpos 626
  ypos 520
 }
push $Nc1504800
 ApplyMaterial {
  inputs 2
  name ApplyMaterial1
  xpos 442
  ypos 517
 }
 Reformat {
  inputs 0
  format {{{parent.input0.format}}}
  resize none
  pbb true
  name Reformat2
  xpos 591
  ypos 733
 }
 ScanlineRender {
  inputs 3
  conservative_shader_sampling false
  overscan {{parent.overscan}}
  motion_vectors_type off
  MB_channel none
  name ScanlineRender1
  xpos 442
  ypos 733
 }
 TimeBlur {
  divisions {{parent.samples}}
  shutter {{parent.shutter}}
  shutteroffset centred
  shuttercustomoffset 0
  name TimeBlur
  xpos 442
  ypos 833
  disable {{"divisions == 1 ? 1 : 0"}}
 }
 Switch {
  inputs 4
  which {{"result == 2 && !\$gui == 1 ? 0 : result"}}
  name Switch1
  xpos 442
  ypos 1277
 }
 Switch {
  inputs 2
  which 1
  name Switch4
  xpos 442
  ypos 1342
  disable true
 }
 Output {
  name Output1
  xpos 442
  ypos 1423
 }
push $Nc1506b00
 FrameHold {
  first_frame {{parent.refFrame}}
  name FrameHold3
  xpos 2121
  ypos -309
 }
 Dot {
  name Dot21
  note_font_size 41
  xpos 2155
  ypos -250
 }
set Nbfb7dd00 [stack 0]
 Axis2 {
  translate {0.5 0.5 0}
  name TopRight
  xpos 2043
  ypos -178
 }
set Nbfb7d600 [stack 0]
push $Nbe74cf00
 Dot {
  name Dot20
  label cam
  note_font_size 41
  xpos 993
  ypos 11
 }
 Dot {
  name Dot17
  label cam
  note_font_size 41
  xpos 1837
  ypos 11
 }
set Nbfb7c800 [stack 0]
push $Nbfc39d00
 Reconcile3D {
  inputs 3
  calc_output true
  output {1201.555786 1134.033569}
  outputxyz {-112.3282394 153.2042542 810.4436035}
  name Reconcile3DTR
  xpos 2033
  ypos 103
 }
push $Nbfb7dd00
 Axis2 {
  translate {-0.5 -0.5 0}
  name BottomLeft
  xpos 2219
  ypos -178
 }
set Nbfb57900 [stack 0]
push $Nbfb7c800
push $Nbfc39d00
 Reconcile3D {
  inputs 3
  calc_output true
  output {-433.5252991 34.41772079}
  outputxyz {-20.63001251 54.64735413 679.4829102}
  name Reconcile3DBL
  xpos 2209
  ypos 99
 }
push $Nbfb7dd00
 Axis2 {
  translate {0.5 -0.5 0}
  name BottomRight
  xpos 2358
  ypos -184
 }
set Nbfb56b00 [stack 0]
push $Nbfb7c800
push $Nbfc39d00
 Reconcile3D {
  inputs 3
  calc_output true
  output {1267.329224 198.26091}
  outputxyz {-120.8343277 61.53775787 808.7359009}
  name Reconcile3DBR
  xpos 2348
  ypos 101
 }
push $Nbfb7dd00
 Axis2 {
  translate {-0.5 0.5 0}
  name TopLeft
  xpos 1883
  ypos -180
 }
set Nbfb55d00 [stack 0]
push $Nbfb7c800
push $Nbfc39d00
 Reconcile3D {
  inputs 3
  calc_output true
  output {-512.678894 1042.547974}
  outputxyz {-12.12392426 146.3138428 681.1906128}
  name Reconcile3DTL
  xpos 1873
  ypos 99
 }
push $Nc1504800
push $Nbfb56b00
push $Nbfb57900
push $Nbfb7d600
push $Nbfb55d00
 Scene {
  inputs 5
  name SceneTest
  xpos 2124
  ypos -86
 }
 Input {
  inputs 0
  name InputAxis
  xpos -382
  ypos -301
  number 2
 }
 NoOp {
  name isON
  xpos -382
  ypos -248
  addUserKnob {20 User}
  addUserKnob {6 isOn +STARTLINE}
  isOn {{"\[exists input2]"}}
 }
push $Nbfbf4f00
 Group {
  inputs 2
  name AxisDistance
  tile_color 0x9c0000ff
  xpos -382
  ypos -57
  addUserKnob {20 tab1 l TNT_AxisDistance}
  addUserKnob {41 distance T NoOp1.distance}
 }
  Output {
   inputs 0
   name Output1
   xpos 488
   ypos 194
  }
  Input {
   inputs 0
   name axis2
   xpos 740
   ypos -220
   number 1
  }
  Axis2 {
   name A2
   xpos 750
   ypos -150
  }
  NoOp {
   inputs 0
   name NoOp1
   xpos 620
   ypos -70
   addUserKnob {20 User}
   addUserKnob {7 distance R 0 100}
   distance {{sqrt((pow2(parent.A1.world_matrix.3-parent.A2.world_matrix.3))+(pow2(parent.A1.world_matrix.7-parent.A2.world_matrix.7))+(pow2(parent.A1.world_matrix.11-parent.A2.world_matrix.11)))}}
  }
  Input {
   inputs 0
   name axis1
   xpos 500
   ypos -220
  }
  Axis2 {
   name A1
   xpos 510
   ypos -150
  }
 end_group
 NoOp {
  name Settings
  xpos -382
  ypos 35
  addUserKnob {20 User}
  addUserKnob {7 camDistance l "Camera Distance" R 0 2000}
  camDistance {{"isOn == 0 ? parent.distance : AxisDistance.distance"}}
 }
end_group
