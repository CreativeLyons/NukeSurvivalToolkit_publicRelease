Group {
 name TransformVector3_
 help "Transform a Vector3 in 3 dimensions."
 addUserKnob {20 main_tab l "Normalize Vector3"}
 addUserKnob {4 matrix_source l "Use matrix from" t "The vectors can be transformed either by the an Axis connected to the Axis input, or a pixel matrix connected to the matrix input.\nOnly one can be used at once." M {Axis "Pixel Matrix"}}
 addUserKnob {6 is_vec4 l "Use alpha as vector W" t "4x4 Matrices can only transform vectors of dimention 4. The common method to transform a vecor3 with a matrix4 is to promote the vector3 to a vector4 by setting the w dimention to 1.\nBy checking this box, the vector w will be set to the alpha value instead. Only use if you know what you are trying to achieve." +STARTLINE}
 addUserKnob {6 normalize l "Normalize result" t "When enabled, the resulting vector is divided by the vector.w after the transformation.\nFor some type of transformations (for example 3d to 2d projection), this step may be required." -STARTLINE}
 normalize true
 addUserKnob {6 invert l Invert t "Invert the transform Matrix" -STARTLINE}
 addUserKnob {41 mix T Merge1.mix}
 addUserKnob {26 ""}
 addUserKnob {26 copyright l "" +STARTLINE T "v1.0 -  Mathieu Goulet-Aubin & Erwan Leroy - <a href=\"https://github.com/mapoga/nuke-vector-matrix\" style=\"color:#aaa\">Github</a>"}
}
 Input {
  inputs 0
  name axis
  xpos 546
  ypos -298
  number 2
 }
 Axis2 {
  useMatrix true
  name MatrixKnob
  xpos 556
  ypos -206
 }
 Input {
  inputs 0
  name matrix
  xpos 358
  ypos -303
  number 1
 }
 Input {
  inputs 0
  name vector3
  xpos 0
  ypos -315
 }
 Dot {
  name Dot1
  tile_color 0xcccccc00
  xpos 34
  ypos -190
 }
set Nf115350 [stack 0]
add_layer {matrix0 matrix0.0 matrix0.1 matrix0.2 matrix0.3}
 Expression {
  channel0 {matrix0.0 -matrix0.1 -matrix0.2 -matrix0.3}
  expr0 MatrixKnob.world_matrix.0
  channel1 {-matrix0.0 matrix0.1 -matrix0.2 -matrix0.3}
  expr1 MatrixKnob.world_matrix.1
  channel2 {-matrix0.0 -matrix0.1 matrix0.2 -matrix0.3}
  expr2 MatrixKnob.world_matrix.2
  channel3 {-matrix0.0 -matrix0.1 -matrix0.2 matrix0.3}
  expr3 MatrixKnob.world_matrix.3
  name Expression1
  xpos 195
  ypos -193
 }
add_layer {matrix1 matrix1.0 matrix1.1 matrix1.2 matrix1.3}
 Expression {
  channel0 {matrix1.0 -matrix1.1 -matrix1.2 -matrix1.3}
  expr0 MatrixKnob.world_matrix.4
  channel1 {-matrix1.0 matrix1.1 -matrix1.2 -matrix1.3}
  expr1 MatrixKnob.world_matrix.5
  channel2 {-matrix1.0 -matrix1.1 matrix1.2 -matrix1.3}
  expr2 MatrixKnob.world_matrix.6
  channel3 {-matrix1.0 -matrix1.1 -matrix1.2 matrix1.3}
  expr3 MatrixKnob.world_matrix.7
  name Expression2
  xpos 195
  ypos -169
 }
add_layer {matrix2 matrix2.0 matrix2.1 matrix2.2 matrix2.3}
 Expression {
  channel0 {matrix2.0 -matrix2.1 -matrix2.2 -matrix2.3}
  expr0 MatrixKnob.world_matrix.8
  channel1 {-matrix2.0 matrix2.1 -matrix2.2 -matrix2.3}
  expr1 MatrixKnob.world_matrix.9
  channel2 {-matrix2.0 -matrix2.1 matrix2.2 -matrix2.3}
  expr2 MatrixKnob.world_matrix.10
  channel3 {-matrix2.0 -matrix2.1 -matrix2.2 matrix2.3}
  expr3 MatrixKnob.world_matrix.11
  name Expression3
  xpos 195
  ypos -145
 }
add_layer {matrix3 matrix3.0 matrix3.1 matrix3.2 matrix3.3}
 Expression {
  channel0 {matrix3.0 -matrix3.1 -matrix3.2 -matrix3.3}
  expr0 MatrixKnob.world_matrix.12
  channel1 {-matrix3.0 matrix3.1 -matrix3.2 -matrix3.3}
  expr1 MatrixKnob.world_matrix.13
  channel2 {-matrix3.0 -matrix3.1 matrix3.2 -matrix3.3}
  expr2 MatrixKnob.world_matrix.14
  channel3 {-matrix3.0 -matrix3.1 -matrix3.2 matrix3.3}
  expr3 MatrixKnob.world_matrix.15
  name Expression4
  xpos 195
  ypos -121
 }
 Dot {
  name Dot2
  tile_color 0xcccccc00
  xpos 229
  ypos -36
 }
 Switch {
  inputs 2
  which {{parent.matrix_source}}
  name Switch1
  xpos 358
  ypos -39
 }
 Shuffle {
  in matrix0
  name Shuffle1
  label "in \[value in]-->out \[value out]"
  xpos 358
  ypos 107
 }
set Ne5f8350 [stack 0]
 Shuffle {
  in matrix1
  name Shuffle2
  label "in \[value in]-->out \[value out]"
  xpos 358
  ypos 147
 }
set Ne68eb10 [stack 0]
 Shuffle {
  in matrix2
  name Shuffle3
  label "in \[value in]-->out \[value out]"
  xpos 358
  ypos 183
 }
set Ne36aef0 [stack 0]
 Shuffle {
  in matrix3
  name Shuffle4
  label "in \[value in]-->out \[value out]"
  xpos 358
  ypos 220
 }
push $Ne36aef0
push $Ne68eb10
push $Ne5f8350
push $Nf115350
 Dot {
  name Dot3
  tile_color 0xcccccc00
  xpos 30
  ypos 165
 }
set N119252d0 [stack 0]
 BlinkScript {
  inputs 5
  recompileCount 18
  ProgramGroup 1
  KernelDescription "2 \"TransformVector4\" iterate pixelWise e9bfb03cdbf363d4b657df0f835e68dba3bb796a594c3822ebad3f28e4e0e81c 6 \"src\" Read Point \"matrix0\" Read Point \"matrix1\" Read Point \"matrix2\" Read Point \"matrix3\" Read Point \"dst\" Write Point 3 \"Input is Vector 4\" Bool 1 AA== \"Divide by W\" Bool 1 AQ== \"Invert Transform\" Bool 1 AA== 3 \"is_vector4\" 1 1 \"do_normalization\" 1 1 \"invert\" 1 1 0"
  kernelSource "kernel TransformVector4 : ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessPoint, eEdgeClamped> src; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix0; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix1; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix2; // the input image\n  Image<eRead, eAccessPoint, eEdgeClamped> matrix3; // the input image\n  Image<eWrite> dst; // the output image\n\n  param:\n    bool is_vector4; \n    bool do_normalization; \n    bool invert;\n\n  // In define(), parameters can be given labels and default values.\n  void define() \{\n    defineParam(is_vector4, \"Input is Vector 4\", false);\n    defineParam(do_normalization, \"Divide by W\", true);\n    defineParam(invert, \"Invert Transform\", false);\n  \}\n\n  void process() \{\n    // Read the input image\n    SampleType(src) vector = src();\n    SampleType(matrix0) m0 = matrix0();\n    SampleType(matrix1) m1 = matrix1();\n    SampleType(matrix2) m2 = matrix2();\n    SampleType(matrix3) m3 = matrix3();\n\n    // Create the matrix object (matrix3 in this case)\n    float4x4  matrix;\n    matrix\[0]\[0] = m0.x;\n    matrix\[0]\[1] = m0.y;\n    matrix\[0]\[2] = m0.z;\n    matrix\[0]\[3] = m0.w;\n    matrix\[1]\[0] = m1.x;\n    matrix\[1]\[1] = m1.y;\n    matrix\[1]\[2] = m1.z;\n    matrix\[1]\[3] = m1.w;\n    matrix\[2]\[0] = m2.x;\n    matrix\[2]\[1] = m2.y;\n    matrix\[2]\[2] = m2.z;\n    matrix\[2]\[3] = m2.w;\n    matrix\[3]\[0] = m3.x;\n    matrix\[3]\[1] = m3.y;\n    matrix\[3]\[2] = m3.z;\n    matrix\[3]\[3] = m3.w;\n\n    if (invert) \{\n      matrix = matrix.invert();\n    \}\n\n    // Transform\n    float a = vector.w;\n    if (!is_vector4) \{\n      vector.w = 1.0f;\n    \}\n    vector  = matrix*vector;\n    if (do_normalization) \{\n      vector  = vector/vector.w;\n    \}\n    if (!is_vector4) \{\n      vector.w = a;\n    \}\n\n    // Write the result to the output image\n    dst() = float4(vector.x, vector.y, vector.z, vector.w);\n  \}\n\};\n"
  rebuild ""
  "TransformVector4_Input is Vector 4" {{parent.is_vec4}}
  "TransformVector4_Divide by W" {{parent.normalize}}
  "TransformVector4_Invert Transform" {{parent.invert}}
  rebuild_finalise ""
  name BlinkScript1
  xpos 128
  ypos 156
 }
 Dot {
  name Dot4
  tile_color 0xcccccc00
  xpos 162
  ypos 296
 }
push $N119252d0
 Merge2 {
  inputs 2
  operation copy
  bbox B
  name Merge1
  xpos -4
  ypos 293
 }
 Output {
  name Output1
  xpos -4
  ypos 544
 }
end_group
