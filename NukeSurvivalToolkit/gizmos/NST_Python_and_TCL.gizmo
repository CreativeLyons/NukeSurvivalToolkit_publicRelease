Group {
 inputs 0
 name Python_and_TCL
 knobChanged "\nnk = nuke.thisNode()\nk = nuke.thisKnob()\n\nif ('operation' in k.name() and int(nk\['operation'].getValue()) == 0 ):\n    python = nuke.toNode('StickyNote_PythonOverview')\['label'].getValue()\n    tcl = nuke.toNode('StickyNote_TCLOverview')\['label'].getValue()\n    website = nuke.toNode('StickyNote_WebsiteOverview')\['label'].getValue()\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 1 ):\n    python = nuke.toNode('StickyNote_CreateNode')\['label'].getValue()\n    tcl = \"\"\n    website = nuke.toNode('StickyNote_CreateNode_website')\['label'].getValue()\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 2 ):\n    python = nuke.toNode('StickyNote_SelectNode')\['label'].getValue()\n    tcl = \"\"\n    website = \"\"\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 3 ):\n    python = nuke.toNode('StickyNote_ConnectNodes')\['label'].getValue()\n    tcl = \"\"\n    website = \"\"\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 4 ):\n    python = nuke.toNode('StickyNote_ReadKnob')\['label'].getValue()\n    tcl = \"\"\n    website = \"\"\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 5 ):\n    python = nuke.toNode('StickyNote_WriteKnob')\['label'].getValue()\n    tcl = \"\"\n    website = \"\"\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 6 ):\n    python = nuke.toNode('StickyNote_CreateKnob')\['label'].getValue()\n    tcl = \"\"\n    website = nuke.toNode('StickyNote_CreateKnob_website')\['label'].getValue()\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 7 ):\n    python = nuke.toNode('StickyNote_Animation')\['label'].getValue()\n    tcl = \"\"\n    website = nuke.toNode('StickyNote_Animation_website')\['label'].getValue()\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 8 ):\n    python = nuke.toNode('StickyNote_PythonExpression')\['label'].getValue()\n    tcl = nuke.toNode('StickyNote_TCLExpression')\['label'].getValue()\n    website = nuke.toNode('StickyNote_WebsiteExpression')\['label'].getValue()\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 9 ):\n    python = nuke.toNode('StickyNote_PythonMath')\['label'].getValue()\n    tcl = nuke.toNode('StickyNote_TCLMath')\['label'].getValue()\n    website = nuke.toNode('StickyNote_websiteMath')\['label'].getValue()\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 10 ):\n    python = nuke.toNode('StickyNote_Def')\['label'].getValue()\n    tcl = \"\"\n    website = \"\"\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 11 ):\n    python = nuke.toNode('StickyNote_Callbacks')\['label'].getValue()\n    tcl = \"\"\n    website = nuke.toNode('StickyNote_websiteCallbacks')\['label'].getValue()\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 12 ):\n    python = nuke.toNode('StickyNote_CustomPanels')\['label'].getValue()\n    tcl = \"\"\n    website = nuke.toNode('StickyNote_WebsiteCustomPanels')\['label'].getValue()\n\nelif ('operation' in k.name() and int(nk\['operation'].getValue()) == 13 ):\n    python = nuke.toNode('StickyNote_Tricks')\['label'].getValue()\n    tcl = \"\"\n    website = nuke.toNode('StickyNote_WebsiteTricks')\['label'].getValue()\n\nif ('operation' in k.name()):\n    nk\['message_python'].setValue(python)\n    nk\['message_tcl'].setValue(tcl)\n    nk\['message_website'].setValue(website)\n"
 autolabel "nuke.thisNode().name() + \"\\n\" + '(' + nuke.thisNode()\['operation'].value() + ')' "
 tile_color 0xff00ffff
 note_font "Bitstream Vera Sans Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold Bold"
 note_font_size 13
 selected true
 addUserKnob {20 read l "Read Me"}
 addUserKnob {4 operation M {"00. Python & TCL Overview" "01. Create node" "02. Select a node" "03. Connect nodes" "04. Read from a knob" "05. Write into a knob" "06. Create new knob" "07. Animation and Curve" "08. Expressions" "09. Math functions and Wave Generator" "10. Functions def()" "11. Callbacks" "12. Custom Panels" "13. Tricks" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {22 create_sticky_note l "Create Sticky Note" -STARTLINE T "n=nuke.thisNode()\nname = n.name()\nnuke.root().begin()\n\ndef create_sticky():\n    if(text!=\"\"):\n        stickyNote = nuke.createNode('StickyNote')\n        nuke.autoplace(stickyNote)\n        stickyNote\[\"label\"].setValue(text)\n\n\ntext=n\['message_python'].getValue()\ncreate_sticky()\n\ntext=n\['message_tcl'].getValue()\ncreate_sticky()\n\ntext=n\['message_website'].getValue()\ncreate_sticky()"}
 addUserKnob {26 ""}
 addUserKnob {41 message_python l Python T Text_python.message}
 addUserKnob {41 message_tcl l TCL T Text_TCL.message}
 addUserKnob {41 message_website l Website T Text_websites.message}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {26 message l "" +STARTLINE T "<b><font color=\"hotpink\">Python and TCL v1.1</font></b>\n<i>by Andrea Geremia</i>\n"}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {22 tutorial l "<b><font color=\"hotpink\">Tutorial" T "nuke.tcl('start', 'http://www.andreageremia.it/tutorial_python_tcl.html')\n" +STARTLINE}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x8e388e00
  note_font_size 42
  xpos -13
  ypos -126
  bdwidth 103
  bdheight 456
 }
 Output {
  inputs 0
  name Output1
  xpos 0
  ypos 300
 }
 StickyNote {
  inputs 0
  name StickyNote_TCLOverview
  label "TCL OVERVIEW\n\nGetting a knob’s value of a specific node:\n\n#First frame of current read/write:\n\[value Read1.first]\n\n#Getting a knob’s value of current node:\n\[value this.first_frame]\n\n#Return label value of the input node:\n\[value this.size]\n\n#Name of the input node:\n\[value this.input0.label]\n\n#Name of the node before the group (Outside):\n\[value this.input.name]\n\n#Return 1 if the node is on error otherwise 0:\n\[value this.parent.input.name]\n\n#Get the bounding Box from the input of the node:\n\[value error]\n\n\n#Here some expression for the Format\nformat.x\nformat.y\nwidth\nheight\nbbox.x\nbbox.y\nbbox.w\nbbox.h\n\n#Get the format from the input of the node:\n\[value input.bbox.x]#left boundary\n\[value input.bbox.r]#right boundary\n\nGet the format from the input of the node:\n\[value input.format.r]#width\n\[value input.format.t]#height\n\n#Get the x position of the point #3 of the Bezier1 of the Roto1 node:\n\[value Roto1.curves.Bezier1.curve_points.3.main.x]\n\n#Return sample pixel value of the node Add1 reading in the red at position of knob Center:\n\[sample Add1 Red Center.x Center.y]\n\n#Get the value of the channel of a node, at a specific pixelcoordinates (e.g.: 10,10):\n\[sample \[node input] red 10 10]\n\n#---------------------------------------------------------------------\n#SET VALUES\n\n#Setting a knob’s value of a specific node:\n\[knob Read1.first 10]\n\n#Setting a variable, without returning that (useful in a textnode):\n\[set seq \[value Read1.file]; return]\n\n#---------------------------------------------------------------------\n#STRING\n\n#Replace string in current node file knob with regex (string “proj” to “projects” in all occurences):\n\[regsub -all \"proj\" \[value \[node this].file] \"projects\"] \n\n#String map (replace multiple stringpairs) (this returns: xxffffxxyy):\n\[string map \{\"aa\" \"xx\" \"bb\" \"yy\"\} \"aaffffaabb\" ]\n\n#Compare strings:\n\[string equal \[value Text1.message] \"bla\"]\n\n#Regexp matching:\n\[regexp -inline \"_v\\\[0-9]\{3\}\" \[value Read2.file]] \n\n#Evaluating string\n\[python os.getenv('rotate') == 'xavierb']\n\n#---------------------------------------------------------------------\n#IF CONDITION\n\n\[if \{condition\} \{expr1\} else \{expr2\}]\n\n#Example:\n\[if \{\[value blackpoint]==1\} \{return 2\} \{return 3\}]\n\[if \{\[value blackpoint]==1\} \{return True\} \{return False\}]\n\[if \{\[value blackpoint]==1\} \{return blackpoint\} \{return whitepoint\}]\n\[if \{\[value filter]==\"gaussian\"\} \{return filter\} \{return False\}]\n\n#OTHER METHOD\ncondition ? then : else\n\n#Example:\n#if (r==1)? return 0: else (return r*2)\nr ==1 ? 0 : r*2\n\n#---------------------------------------------------------------------\n#PATH MANIPULATIONS:\n\n#Filepath without extension:\n\[file rootname \[value \[topnode].file]]\n\n#Filename only:\n\[basename \[value \[topnode].file ]]\n\n#Filename only without extension:\n\[basename\[file rootname \[value \[topnode].file]]]"
  xpos -1411
  ypos -3379
 }
 StickyNote {
  inputs 0
  name StickyNote_PythonOverview
  label "PYTHON OVERVIEW\n\n#-------------------------------------------------------\n#PRINT and VARIABLES\nprint 'Hello World'\n\nname = 'Andrea'\nprint 'Hello' + name\n\n#-------------------------------------------------------\n#VARIABLES TYPES\n\nint(x)\nlong(x)\nfloat(x)\nstr(x)\n\n#convert string o int\nint (stringa)\n\n#convert int to string\nstr(integer)\n\n#-------------------------------------------------------\n#STRINGs\n\nvar1 = 'Hello World!'\nprint \"Updated String : \", var1\[:6] + 'Python'\n#Result: Updated String :  Hello Python\n\nvar2 = \"Hello, Ciao, Halo,\"\nlist = var2.split(',')\nfor x  in list:\n    print(x)\n#Result \tHello\n#\tCiao\n# \tHalo\n\n#-------------------------------------------------------\n#IF CONDITION\n\nif expression:\n   statement(s)\nelse:\n   statement(s)\n\n#Example 01\nif var == 200:\n\tprint 'ciao'\nelif var<200:\n\tprint 'ok'\n\n#Example 02\nanswer = 'y'\nif answer is 'y':\n    print(\"answer is equal to 'y'\")\n\n#Example 03\nif answer in \['y', 'Y', 'yes', 'Yes', 'YES']:\n    print(\"answer is in this list\")\n\n#-------------------------------------------------------\n#IF CONDITION in 1 line\n(\"some string\" if expression else \"another string\")\n\n#if size > 100 then print 'big', otherwise print 'small'\n(' big!' if nuke.thisNode()\['size'].value()>100 else ' small')\n\n#-------------------------------------------------------\nFOR LOOP\n\n#simple structure\nfor x in range(0, 3):\nprint x\n\n#Lists as an iterable\ncollection = \['hey', 5, 'd']\nfor x in collection:\n    print x\n\n#-------------------------------------------------------\nWHILE LOOP\n\ncount = 0\nwhile (count < 9):\n   print 'The count is:', count\n   count = count + 1\n\nprint \"Good bye!\"\n\n# Result: The count is: 0\n#The count is: 1\n#The count is: 2\n#The count is: 3\n#The count is: 4\n#The count is: 5\n#The count is: 6\n#The count is: 7\n#The count is: 8\n#Good bye!"
  xpos -1822
  ypos -3379
 }
 StickyNote {
  inputs 0
  name StickyNote_WebsiteOverview
  label "https://www.tutorialspoint.com/python/index.htm\n\nhttps://learn.foundry.com/nuke/developers/63/pythondevguide/basics.html\n\nhttps://learn.foundry.com/nuke/developers/63/pythondevguide/index.html\n\n#----------------------------------------------------------------------------------------------\n\nhttp://www.nukepedia.com/tcl/tcl-reference\n\nhttp://www.nukepedia.com/reference/Tcl/group__tcl__builtin.html\\\n\nhttp://www.lookinvfx.com/nuke-tcl-snippets/\n\nhttp://thoughtvfx.blogspot.de/2012/12/nuke-tcl-tips.html\n"
  xpos -825
  ypos -3383
 }
 StickyNote {
  inputs 0
  name StickyNote_CreateNode
  label "CREATE NODE\n\n#create node with nuke.nodes.xxx()\nnuke.nodes.Blur()\nnuke.createNode(\"Grade\")\n\n#create 3 Blur Nodes\nfor x in range(0, 3):\n    nuke.nodes.Blur()\n\n#----------------------------------------------------------------------------------\n#Python Button in a Group create a Blur Node outside the Group\n#Copy this in a Python Button in a Group\n#Example01\nnuke.root().begin()\nstickyNote = nuke.createNode('Blur')\n\n\n#Python Button in a Group create a StickyNode outside the Group, reading the value in the knob 'python'\n#Example02\nn=nuke.thisNode()\nname = n.name()\ntext=nuke.toNode(name)\['python'].getValue()\n\nnuke.root().begin()\nstickyNote = nuke.createNode('StickyNote')\nstickyNote\[\"label\"].setValue(text)"
  xpos -1750
  ypos -1942
 }
 StickyNote {
  inputs 0
  name StickyNote_CreateNode_website
  label "#https://learn.foundry.com/nuke/developers/63/pythondevguide/basics.html\n\n#List of all the nodes in Nuke: http://nukexexperts.blogspot.de/2013/05/nuke-node-reference-image-nodes.html\n"
  xpos -1122
  ypos -1926
 }
 StickyNote {
  inputs 0
  name StickyNote_ReadKnob
  label "READ KNOB\n\n# List all knobs for selected node\nprint( nuke.toNode('Read1') )\n\n# List all knobs for specific node\nprint( nuke.selectedNode() )\n\n# Get value from specific node, method 01\nvalue = nuke.toNode('Read1').knob('file').getValue()\n\n#Print value from specific node, method 02\nnode = nuke.toNode(\"Blur1\")\nprint node\['size'].value()\n\n# Get value from selected node\nvalue = nuke.selectedNode().knob('file').getValue()\n\n#Get default value\nnuke.toNode('Blur6').knob('size').defaultValue()\n\n# Get value from specific node and evaluate it (good for expressions)\nvalue = nuke.toNode('Read1').knob('file').evaluate()\n\n#get the expression of a knob\nif nuke.toNode('Blur6').knob('size').hasExpression():\n    print nuke.toNode('Blur6').knob('size').toScript()\n\n#Get value XY_knob individually\nnuke.toNode('Transform1').knob('scale').getValue(0)\t#w\nnuke.toNode('Transform1').knob('scale').getValue(1)\t#h\n\n#get me the height and width from a selected node\nnuke.selectedNode().height()\nnuke.selectedNode().width()\nnuke.selectedNode().pixelAspect\n\n#--------------------------------------------------------------------------------\n#DROPDOWN MENU / PULLDOWN CHOICE\n\n#Get value from Pulldown Choice (name)\nnuke.selectedNode()\['attribute'].value()\n\n#Get index from Pulldown Choice (name)\nint(nuke.toNode('Blur6').knob('filter').getValue())\nint(nuke.selectedNode().knob('filter').getValue())\n\n#--------------------------------------------------------------------------------\n#Check the name of a knob (will be useful later)\nnode = nuke.selectedNode()\nknob = node\['filter']\nif('filter' in knob.name()):\n    print \"found it!\"\n\n#Calculate the max and min value in a framerange\nret = nuke.getFramesAndViews('get range', '1-100')\nframe_range = ret\[0].split('-')\n\nmin=0\nmax=0\n\nfor i in range(int(frame_range\[0]), int(frame_range\[1])+1):\n    knob = nuke.selectedNode()\['size'].getValueAt(i)\n    print 'value: ' + knob\n    print 'frame: ' + i\n    if (knob > max):\n        max = knob\n\n    if (knob < min):\n        min = knob\n\nprint 'max is', max\nprint 'min is', min\n\n#--------------------------------------------------------------------------------\n#Get Frame Range from node\nfirst_frame = nuke.selectedNode().firstFrame()\nlast_frame = nuke.selectedNode().lastFrame()\n\n#-------------------------------------------------------------------------------\n#READ KNOB INSIDE GROUP\n#Get a knob of a Node inside a Group. This works only into a Python Button of the Group\nn=nuke.thisNode()\nname = n.name()\nprint nuke.toNode('StickyNote_PythonOverview')\['label'].getValue()\n"
  xpos -1664
  ypos -407
 }
 StickyNote {
  inputs 0
  name StickyNote_WriteKnob
  label "WRITE KNOB\n#Set default value for a knob\nnuke.knobDefault( 'Blur.size', '77' )\nnuke.knobDefault( 'channels', 'rgba' )\n\n# Set specific node's value\nnuke.toNode('Read1').knob('file').setValue('c:/hello.tif')\nnuke.toNode('Transform2').knob('scale').setValue(2)\n\n# Set selected node's value\nnuke.selectedNode().knob('file').setValue('c:/hello.tif')\nnuke.selectedNode()\['scale'].setValue(3)\n\n# Set this node's value\nnuke.thisNode().knob('file').setValue('c:/hello.tif')\n\n#Set knob with 4 values (x, y, w, h)\nn = nuke.selectedNode()\nn\['box'].setValue((0, 150, 4096, 2010))\n\n#Set knob with 2 values (w, h)\nnuke.selectedNode()\['scale'].setValue(1250, 0)\n\n#When a node has XY Knob, use this code to split values and assign 2 different values\nnuke.selectedNode()\['scale'].setSingleValue(False)\nnuke.selectedNode()\['scale'].setExpression('scale.w*2',1)\n\n# Set specific node's knob to default value\nnuke.toNode('Grade1').knob('gamma').setValue( nuke.toNode('Grade1').knob('gamma').defaultValue() )\n\n#set Expression in a knob\nnode = nuke.selectedNode()\nnode.knob('mix').setExpression('size + 5')\n\n#disable a node\nnuke.toNode('Blur7')\['disable'].setValue(True)\n\n#single or multiple values in a Knob\nnuke.toNode('Transform2')\['scale'].setSingleValue(True)\n\n#set a checkbox\nnuke.toNode('Transform2')\['invert_matrix'].setValue(True)\nnuke.toNode('Transform2')\['invert_matrix'].setValue(1)\n\n#--------------------------------------------------------------------------------\n#DROPDOWN MENU / PULLDOWN CHOICE\n\n#set a pulldown choice\nnuke.toNode('Transform2')\['filter'].setValue(2)\n\n#populate pulldown choice (dropdown menu)\npulldown = nuke.toNode('Group1')\n\npulldown\['id'].setValues(\['a', 'b', 'c'])\n\n\n#expression in Pulldown choice\ntcl:\nin Transform1.filter \{set_expression \{Transform2.filter\}\}\n\npython\nk=nuke.toNode('Transform1')\['filter']\nk.setExpression('Transform2.filter',0)\n\n#--------------------------------------------------------------------------------\n#set a knob as the current frame\nnk = nuke.thisNode()\nnk.knob('translate').setValue(nuke.frame())"
  xpos -1744
  ypos 686
 }
 StickyNote {
  inputs 0
  name StickyNote_CreateKnob
  label "CREATE KNOB\n\n#formula\nnode = nuke.toNode('Name Node')\nknob = nuke.nuke.Double_Knob('name', 'Label')\nnode.addKnob(knob)\n\n\n#create a Slider knob\nnode = nuke.selectedNode()\nknob = nuke.nuke.Double_Knob('slider', 'Slider') \nknob.setRange(1,100)\nknob.setValue(10)\nnode.addKnob(knob)\n\n#------------------------------------------------------------------------------\n# create a Checkbox\nsn = nuke.selectedNode()\n\nuk = nuke.nuke.Boolean_Knob('checkbox', 'Checkbox') \nuk.setValue(True)\nsn.addKnob(uk)"
  xpos -1741
  ypos 1567
 }
 StickyNote {
  inputs 0
  name StickyNote_CreateKnob_website
  label "#Find all the Knob Types here:\n\nhttps://learn.foundry.com/nuke/developers/63/ndkdevguide/knobs-and-handles/knobtypes.html"
  xpos -1411
  ypos 1567
 }
 StickyNote {
  inputs 0
  name StickyNote_Animation
  label "ANIMATION\n\n#current frame\nprint nuke.frame()\n\n#go to frame x\nnuke.frame(x)\n\n#get value of knob at frame 5\nknob = nuke.selectedNode()\['size'].getValueAt(5)\n\n#if knob is animated\nnode = nuke.createNode( 'Blur' )\nk = node\['size']\nk.isAnimated()\n\n#if has an expression\nk.hasExpression()\n\n#Return True if there is a keyframe at the current frame \nk.isKey()\n\n#Return True if there is a keyframe at the frame 5 \nk.isKeyAt(5)\n\n#get key value at frame 3\nnuke.selectedNode()\['rotate'].getValueAt(3)\n\n# print key value at current frame\nnk = nuke.selectedNode()\nknob = nk.knob('rotate')\nprint knob.getValueAt(nuke.frame())\n\n#set knob to accept animation\nnode = nuke.createNode( 'Blur' )\nk = node\['size']\nk.setAnimated()\n\n#set key in the current frame\nk.setValue( 5 )\n\n#two more keys at frame 10 and 100 with values of 55 and 66 respectively\nk.setValueAt( 55, 10 )\nk.setValueAt( 66, 100 )\n\n\n#if knob is an array, this sets the first field/channel to 77 and the second to 88 at frame 100\nk.setValueAt( 77, 100, 0 )\nk.setValueAt( 88, 100, 1 )\n\n#------------------------------------------------------------------------------------------------\n#print all the keys with the values for the given animation curve\nfor key in animCurve.keys():\n    xValue = key.x\n    yValue = key.y\n    print 'ket at %s has value %s' % ( xValue, yValue )\n\n# Result:\nket at 1.0 has value 5.0\nket at 10.0 has value 55.0\nket at 100.0 has value 77.0\n\n#------------------------------------------------------------------------------------------------\n#Clear all the animation in a node\nn=nuke.selectedNode()\nk=n.allKnobs()\nfor i in k:\n    i.clearAnimated()\n----------------------------------------------------------------------------\n\n#Bake animation\nhttps://learn.foundry.com/nuke/developers/63/pythondevguide/animation.html\n\n----------------------------------------------------------------------------\n#Example 01: Select the anim curve\ng1 = nuke.toNode(\"Grade1\")\ngBlack = g1\['blackpoint']\nanim = gBlack.animation(0)\nprint anim\n\n\n#------------------------------------------------------------------------------------------------\n#Example 02: create a Frade Node with 2 keys on the blackpoint at frame 1 and 10\ng = nuke.nodes.Grade()\na = nuke.AnimationC urve(g\['blackpo int'], 0, 'r')\na.setKey(1, .1)\na.setKey(10, .125)\ng\['blackpoint'].copyAnimation(0, a)\n#------------------------------------------------------------------------------------------------\n#Evaluate: This simply takes a numeric frame argument (int or float) and returns the curve’s value at that frame\nanim.evaluate(30)\n\n#frame number and a key value\nanim.setKey(48, .044)\n\n#This returns True if the animation is driven by keys, or False if the animation is linked by an expression. \nanim.noExpression()\n\n#attach an expression to an AnimationCurve\ngWhite = g1\['whitepoint']\ngWhite.setAnimated()\nanim2 = gWhite.animation(0)\nanim2.setExpression(\"blackpoint\")\n\n#------------------------------------------------------------------------------------------------\n#this method will still return the value ‘curve if the parent knob isn’t linked using an expression\nanim.expression()\n\n#This returns a list of AnimationKey objects\nkeys = anim.keys()\nprint keys\n#------------------------------------------------------------------------------------------------\n#DELETE ANIMATION\n\n#Delete all keys from the curve\nanim.clear()\n\n#Remove key \nknob.removeKey()\n\n#Remove key at time 't' \nknob.removeKeyAt(t)\n\n#Delete the animation from all the selected nodes\nnodes = nuke.selectedNodes()\nfor n in nodes:\n    knobs = n.allKnobs()\nfor k in knobs:\n    k.clearAnimated()"
  xpos -1771
  ypos 1901
 }
 StickyNote {
  inputs 0
  name StickyNote_Animation_website
  label "http://www.nukepedia.com/python/animationcurve-and-animationkey-objects\n\nhttps://learn.foundry.com/nuke/developers/63/pythondevguide/animation.html\n\nhttps://learn.foundry.com/nuke/developers/80/pythonreference/nuke.Knob-class.html\n\nhttps://learn.foundry.com/nuke/developers/63/pythondevguide/basics.html#copying-an-animation-curve-between-nodes"
  xpos -1120
  ypos 1898
 }
 StickyNote {
  inputs 0
  name StickyNote_PythonExpression
  label "EXPRESSION in PYTHON\n\n• nuke.expression() to use a Nuke expression in Python code.\n\n• expression to use a Nuke expression in TCL.\n\n• nuke.tcl() to run TCL code in Python.\n\n• python to run Python code in TCL\n\n• \[ ] (square brackets) to embed TCL in a Nuke expression (or a string knob)\n\n• \[python \{...\}] to embed Python in a Nuke expression.\n\n\n#set knob with an Expression\nnode = nuke.selectedNode()\nnode.knob('mix').setExpression('size + 5')\n\n#another example\nnode = nuke.toNode('Grade1')\nnode.knob('whitepoint').setExpression('gain + 1')\n\n#Use Python in the Expression (with TCL)\n\[python nuke.thisNode().metadata().keys()]\n\n\[python nuke.thisNode().metadata()\\\['input/filename'\\]]\n\n\[python \{nuke.thisNode().metadata\['input/filename']\}]\n\n\[python \{nuke.thisNode().metadata\['input/filename']\}]\n\n#Use python in Expression\n\[python \{nuke.thisNode().knob(\\'rotate\\').value()\}]\n\n\n#TCL in Python\nnuke.tcl('return '+nuke.selectedNode()\['filter'].value())"
  xpos -1895
  ypos 3622
 }
 StickyNote {
  inputs 0
  name StickyNote_TCLExpression
  label "EXPRESSION TCL\n\nGetting a knob’s value of a specific node:\n\n#First frame of current read/write:\n\[value Read1.first]\n\n#Getting a knob’s value of current node:\n\[value this.first_frame]\n\n#Return label value of the input node:\n\[value this.size]\n\n#Name of the input node:\n\[value this.input0.label]\n\n#Name of the node before the group (Outside):\n\[value this.input.name]\n\n#Return 1 if the node is on error otherwise 0:\n\[value this.parent.input.name]\n\n#Get the bounding Box from the input of the node:\n\[value error]\n\n\n#Here some expression for the Format\nformat.x\nformat.y\nwidth\nheight\nbbox.x\nbbox.y\nbbox.w\nbbox.h\n\n#Get the format from the input of the node:\n\[value input.bbox.x]#left boundary\n\[value input.bbox.r]#right boundary\n\nGet the format from the input of the node:\n\[value input.format.r]#width\n\[value input.format.t]#height\n\n#Get the x position of the point #3 of the Bezier1 of the Roto1 node:\n\[value Roto1.curves.Bezier1.curve_points.3.main.x]\n\n#Return sample pixel value of the node Add1 reading in the red at position of knob Center:\n\[sample Add1 Red Center.x Center.y]\n\n#Get the value of the channel of a node, at a specific pixelcoordinates (e.g.: 10,10):\n\[sample \[node input] red 10 10]\n\n#---------------------------------------------------------------------\n#SET VALUES\n\n#Setting a knob’s value of a specific node:\n\[knob Read1.first 10]\n\n#Setting a variable, without returning that (useful in a textnode):\n\[set seq \[value Read1.file]; return]\n\n#---------------------------------------------------------------------\n#STRING\n\n#Replace string in current node file knob with regex (string “proj” to “projects” in all occurences):\n\[regsub -all \"proj\" \[value \[node this].file] \"projects\"] \n\n#String map (replace multiple stringpairs) (this returns: xxffffxxyy):\n\[string map \{\"aa\" \"xx\" \"bb\" \"yy\"\} \"aaffffaabb\" ]\n\n#Compare strings:\n\[string equal \[value Text1.message] \"bla\"]\n\n#Regexp matching:\n\[regexp -inline \"_v\\\[0-9]\{3\}\" \[value Read2.file]] \n\n#Evaluating string\n\[python os.getenv('rotate') == 'xavierb']\n\n#---------------------------------------------------------------------\n#IF CONDITION\n\n\[if \{condition\} \{expr1\} else \{expr2\}]\n\n#Example:\n\[if \{\[value blackpoint]==1\} \{return 2\} \{return 3\}]\n\[if \{\[value blackpoint]==1\} \{return True\} \{return False\}]\n\[if \{\[value blackpoint]==1\} \{return blackpoint\} \{return whitepoint\}]\n\[if \{\[value filter]==\"gaussian\"\} \{return filter\} \{return False\}]\n\n#OTHER METHOD\ncondition ? then : else\n\n#Example:\n#if (r==1)? return 0: else (return r*2)\nr ==1 ? 0 : r*2\n\n#---------------------------------------------------------------------\n#PATH MANIPULATIONS:\n\n#Filepath without extension:\n\[file rootname \[value \[topnode].file]]\n\n#Filename only:\n\[basename \[value \[topnode].file ]]\n\n#Filename only without extension:\n\[basename\[file rootname \[value \[topnode].file]]]"
  xpos -1364
  ypos 3624
 }
 StickyNote {
  inputs 0
  name StickyNote_WebsiteExpression
  label "http://community.foundry.com/discuss/topic/101836\n\nhttps://docs.python.org/3/reference/expressions.html\n\n#----------------------------------------------------------------------------\n\nhttp://www.nukepedia.com/tcl/tcl-reference\n\nhttp://www.nukepedia.com/reference/Tcl/group__tcl__builtin.html\\\n\nhttp://www.lookinvfx.com/nuke-tcl-snippets/\n\nhttp://thoughtvfx.blogspot.de/2012/12/nuke-tcl-tips.html\n"
  xpos -784
  ypos 3632
 }
 StickyNote {
  inputs 0
  name StickyNote_TCLMath
  label "MATH FUNCTIONS\nTCL\n\n#Returns the absolute value of the floating-point number x.\nabs (x)\n\n#Round x up to the nearest integer.\nceil (x)\n\n#Round x down to the nearest integer.\nfloor (x)\n\n#Round x to the nearest integer not larger in absolute value\nint (x)\n\n#Return x clamped to \[0.0 ... 1.0].\nclamp (x)\n\n#Returns the cosine of x.\ncos(x)\n\n#Returns the sine of x.\nsin (x)\n\n#Returns the y value of the animation curve at the given frame\ncurve (frame)\nrotate(frame)\n\n#Returns the current frame\nframe\n\n#Convert the angle x from radians into degrees\ndegrees (x)\n\n#Convert the angle x from degrees into radians\nradians (x)\n\n#Return the greatest of all values\nmax (x, y, ... )\n\n#Return the smallest of all values\nmin (x, y, ... )\n\n#Return the value for pi (3.141592654...)\npi\n\n#Returns the value of x raised to the power of y.\npow (x, y)\n\n#Returns the non-negative square root of x.\nsqrt (x)\n\n#Evaluates the y value for an animation at the given frame\nvalue (frame)"
  xpos -1839
  ypos 5097
 }
 StickyNote {
  inputs 0
  name StickyNote_Def
  label "DEF\n\n#sintax\ndef function_name( parameters ):\n   \"function_docstring\"\n   function_suite\n   return \[expression]\n\n#example\ndef printme( str ):\n   \"This prints a passed string into this function\"\n   print str\n   return\n\ndef sum(a, b)\n c = a+b   \n return c\n---------------------\n print \"the sum is \" + sum(10, 5)"
  xpos -1543
  ypos 5822
 }
 StickyNote {
  inputs 0
  name StickyNote_Callbacks
  label "#CALLBACKS\n\n#----------------------------------------------------------------\n#KNOB CHANGED\n\n#sintax\n#copy this in the Script Editor in Nuke, select your node (or subsistute nuke.selectedNode() with nuke.toNode(\"NodeName\")) and launch the script\n#Example 01\n\nnuke.selectedNode().knob('knobChanged').setValue(\"\nnk = nuke.thisNode()\nk = nuke.thisKnob()\nif ('rotate' in k.name()):\n    #YOUR CODE\")\n\n\n#every time that rotate will change, it will execute your code\n#This was just an example, in your Script Editor use THIS VERSION with \\n for a new line\nnuke.selectedNode().knob('knobChanged').setValue(\"nk = nuke.thisNode()\\nk =nuke.thisKnob()\\nif ('rotate' in k.name()):    #YOUR CODE\")\n\n#----------------------------------------------------------------\n#Example 02\n#To avoid the \\n to every line, just use \"\"\"\nnuke.selectedNode().knob('knobChanged').setValue(\"\"\"\nnk = nuke.thisNode()\nk = nuke.thisKnob()\nif ('gain' in k.name()):\n    print 'ciao'\n\"\"\")\n\n#----------------------------------------------------------------\nnuke.selectedNode()\['knobChanged'].setValue(\"if nuke.thisKnob().name() == 'inputChange': print 'input has Changed'\")\n\n#remember to use the ' ' instead of \" \" inside the python code\n\n#----------------------------------------------------------------\n#ON CREATE\nnuke.selectedNode().knob('onCreate').setValue(\"nk = nuke.thisNode()\\nk = nk\['first_frame']\\nk.setValue(nuke.frame())\")"
  xpos -1786
  ypos 6103
 }
 StickyNote {
  inputs 0
  name StickyNote_websiteCallbacks
  label "https://learn.foundry.com/nuke/developers/63/pythondevguide/callbacks.html\n\nhttps://learn.foundry.com/nuke/developers/63/ndkdevguide/knobs-and-handles/knobchanged.html\n"
  xpos -963
  ypos 6117
 }
 StickyNote {
  inputs 0
  name StickyNote_WebsiteCustomPanels
  label "https://learn.foundry.com/nuke/developers/63/pythondevguide/custom_panels.html\n"
  xpos -1247
  ypos 6654
 }
 StickyNote {
  inputs 0
  name StickyNote_WebsiteTricks
  label #http://www.comp-fu.com/2014/07/nuke-autolabel-magic/
  xpos -900
  ypos 6831
 }
 StickyNote {
  inputs 0
  name StickyNote_CustomPanels
  label "CUSTOM PANELS\n\n#----------------------------------------------------------------\npan = nuke.Panel('test')\nchoices = 'fistchoice secondchoice thridchoice'\npan.addEnumerationPulldown('choice:', choices)\npan.show()"
  xpos -1624
  ypos 6639
 }
 StickyNote {
  inputs 0
  name StickyNote_SelectNode
  label "SELECT NODE\n#get selected node\nnuke.selectedNode()\n\n#get multiple nodes selected\nnuke.selectedNodes()\n\n#select node by name\nnode = nuke.toNode(\"Blur1\")\nnode.knob('selected').setValue(True)\n\n#select all the nodes\nfor node in nuke.allNodes():\t\t\t# The 'for loop'\n        node\['selected'].setValue(True)\t\t#Attribute 'selected' becomes True\n\n#-------------------------------------------------------------------------------------\n#select nodes that start with a specific \"string\"\nfor node in nuke.allNodes():\n    if node\['name'].value().startswith(\"ColorCor\"):\t#Instead of 'ColorCor' put the name that you want\n        node\['selected'].setValue(True)\n\n#-------------------------------------------------------------------------------------\n#select node by class\nfor node in nuke.allNodes():\n    if node.Class() == \"Blur\":\t\t#Select all the Blur nodes\n        node\['selected'].setValue(True)\n\n\n#-------------------------------------------------------------------------------------\n#Run a script for every selected node\nsn = nuke.selectedNodes()               \t# The list of nodes.\nfor node in sn:\t\t\n    print nodes\['name'].getValue()      \t# Put your code here.\n\n#-------------------------------------------------------------------------------------\n#Add name of nodes into a Array (List). Select nodes and create a list of all the names\narray = \[]\t\t\t#create the array\nfor node in nuke.selectedNodes():\t\n    n = node\['name'].value()\n    array.append(n)\t\t#Add the value to the list\nprint array\t\t\t#print the list\n\n#---------------------------------------------------------------------------------------\n#DESELECT ALL SELECTED NODES\nif nuke.selectedNodes():\n\tfor i in nuke.selectedNodes():\n\t\ti\['selected'].setValue(False)"
  xpos -1715
  ypos -1578
 }
 StickyNote {
  inputs 0
  name StickyNote_ConnectNodes
  label "CONNECT NODES\n\n#Connect the output of the select node to the input 0 of ColorCorrect\nnuke.toNode('ColorCorrect3').setInput( 0, nuke.selectedNode() )\n\n#Connect the output of the select node to the input 1 (mask) of ColorCorrect\nnuke.toNode('ColorCorrect3').setInput( 1, nuke.selectedNode() )\n\n#Connect output of ColorCorrection to all the selected nodes\nfor i in nuke.selectedNodes():\n    i.setInput( 0, nuke.toNode('ColorCorrect3'))\n\n#-------------------------------------------------------------------------------------\n#Create a merge node e connect the inputs to the selected nodes\na = nuke.createNode('Merge')\nb = nuke.selectedNodes()\nx=0\nfor i in b:\n    if x==2:\n        x+=1\n    continue\n    a.setInput(x,i)\n    x+=1\n\n#-------------------------------------------------------------------------------------\n#DISCONNECT NODES\n\n#Disconnect input\nnuke.selectedNode().setInput(1, None)\n\n#Disconnect all the inputs of the selected node\nfor i in range(0, nuke.selectedNode().maxInputs()):\n         nuke.selectedNode().setInput(i, None)\n\n#-------------------------------------------------------------------------------------\n#DEPENDENT AND DEPENDENCIES\n\n#List of nodes dependent and dependencies\nnuke.selectedNode().dependent()\nnuke.selectedNode().dependencies()\n\n#Print the name of the nodes\nfor i in nuke.selectedNode().dependencies():\n    print i.name()"
  xpos -1644
  ypos -976
 }
 Text2 {
  inputs 0
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "PYTHON OVERVIEW\n\n#-------------------------------------------------------\n#PRINT and VARIABLES\nprint 'Hello World'\n\nname = 'Andrea'\nprint 'Hello' + name\n\n#-------------------------------------------------------\n#VARIABLES TYPES\n\nint(x)\nlong(x)\nfloat(x)\nstr(x)\n\n#convert string o int\nint (stringa)\n\n#convert int to string\nstr(integer)\n\n#-------------------------------------------------------\n#STRINGs\n\nvar1 = 'Hello World!'\nprint \"Updated String : \", var1\[:6] + 'Python'\n#Result: Updated String :  Hello Python\n\nvar2 = \"Hello, Ciao, Halo,\"\nlist = var2.split(',')\nfor x  in list:\n    print(x)\n#Result \tHello\n#\tCiao\n# \tHalo\n\n#-------------------------------------------------------\n#IF CONDITION\n\nif expression:\n   statement(s)\nelse:\n   statement(s)\n\n#Example 01\nif var == 200:\n\tprint 'ciao'\nelif var<200:\n\tprint 'ok'\n\n#Example 02\nanswer = 'y'\nif answer is 'y':\n    print(\"answer is equal to 'y'\")\n\n#Example 03\nif answer in \['y', 'Y', 'yes', 'Yes', 'YES']:\n    print(\"answer is in this list\")\n\n#-------------------------------------------------------\n#IF CONDITION in 1 line\n(\"some string\" if expression else \"another string\")\n\n#if size > 100 then print 'big', otherwise print 'small'\n(' big!' if nuke.thisNode()\['size'].value()>100 else ' small')\n\n#-------------------------------------------------------\nFOR LOOP\n\n#simple structure\nfor x in range(0, 3):\nprint x\n\n#Lists as an iterable\ncollection = \['hey', 5, 'd']\nfor x in collection:\n    print x\n\n#-------------------------------------------------------\nWHILE LOOP\n\ncount = 0\nwhile (count < 9):\n   print 'The count is:', count\n   count = count + 1\n\nprint \"Good bye!\"\n\n# Result: The count is: 0\n#The count is: 1\n#The count is: 2\n#The count is: 3\n#The count is: 4\n#The count is: 5\n#The count is: 6\n#The count is: 7\n#The count is: 8\n#Good bye!"
  old_message {{69 88 80 82 69 83 83 73 79 78 32 105 110 32 80 89 84 72 79 78 10 10 8226 32 110 117 107 101 46 101 120 112 114 101 115 115 105 111 110 40 41 32 116 111 32 117 115 101 32 97 32 78 117 107 101 32 101 120 112 114 101 115 115 105 111 110 32 105 110 32 80 121 116 104 111 110 32 99 111 100 101 46 10 10 8226 32 101 120 112 114 101 115 115 105 111 110 32 116 111 32 117 115 101 32 97 32 78 117 107 101 32 101 120 112 114 101 115 115 105 111 110 32 105 110 32 84 67 76 46 10 10 8226 32 110 117 107 101 46 116 99 108 40 41 32 116 111 32 114 117 110 32 84 67 76 32 99 111 100 101 32 105 110 32 80 121 116 104 111 110 46 10 10 8226 32 112 121 116 104 111 110 32 116 111 32 114 117 110 32 80 121 116 104 111 110 32 99 111 100 101 32 105 110 32 84 67 76 10 10 8226 32 91 32 93 32 40 115 113 117 97 114 101 32 98 114 97 99 107 101 116 115 41 32 116 111 32 101 109 98 101 100 32 84 67 76 32 105 110 32 97 32 78 117 107 101 32 101 120 112 114 101 115 115 105 111 110 32 40 111 114 32 97 32 115 116 114 105 110 103 32 107 110 111 98 41 10 10 8226 32 91 112 121 116 104 111 110 32 123 46 46 46 125 93 32 116 111 32 101 109 98 101 100 32 80 121 116 104 111 110 32 105 110 32 97 32 78 117 107 101 32 101 120 112 114 101 115 115 105 111 110 46 10 10 10 35 115 101 116 32 107 110 111 98 32 119 105 116 104 32 97 110 32 69 120 112 114 101 115 115 105 111 110 10 110 111 100 101 32 61 32 110 117 107 101 46 115 101 108 101 99 116 101 100 78 111 100 101 40 41 10 110 111 100 101 46 107 110 111 98 40 39 109 105 120 39 41 46 115 101 116 69 120 112 114 101 115 115 105 111 110 40 39 115 105 122 101 32 43 32 53 39 41 10 10 35 97 110 111 116 104 101 114 32 101 120 97 109 112 108 101 10 110 111 100 101 32 61 32 110 117 107 101 46 116 111 78 111 100 101 40 39 71 114 97 100 101 49 39 41 10 110 111 100 101 46 107 110 111 98 40 39 119 104 105 116 101 112 111 105 110 116 39 41 46 115 101 116 69 120 112 114 101 115 115 105 111 110 40 39 103 97 105 110 32 43 32 49 39 41 10 10 35 85 115 101 32 80 121 116 104 111 110 32 105 110 32 116 104 101 32 69 120 112 114 101 115 115 105 111 110 32 40 119 105 116 104 32 84 67 76 41 10 91 93 10 10 91 112 121 116 104 111 110 32 110 117 107 101 46 116 104 105 115 78 111 100 101 40 41 46 109 101 116 97 100 97 116 97 40 41 92 91 39 105 110 112 117 116 47 102 105 108 101 110 97 109 101 39 92 93 93 10 10 91 112 121 116 104 111 110 32 123 110 117 107 101 46 116 104 105 115 78 111 100 101 40 41 46 109 101 116 97 100 97 116 97 91 39 105 110 112 117 116 47 102 105 108 101 110 97 109 101 39 93 125 93 10 10 91 112 121 116 104 111 110 32 123 110 117 107 101 46 116 104 105 115 78 111 100 101 40 41 46 109 101 116 97 100 97 116 97 91 39 105 110 112 117 116 47 102 105 108 101 110 97 109 101 39 93 125 93 10 10 35 85 115 101 32 112 121 116 104 111 110 32 105 110 32 69 120 112 114 101 115 115 105 111 110 10 91 112 121 116 104 111 110 32 123 110 117 107 101 46 116 104 105 115 78 111 100 101 40 41 46 107 110 111 98 40 92 39 114 111 116 97 116 101 92 39 41 46 118 97 108 117 101 40 41 125 93 10 10 10 35 84 67 76 32 105 110 32 80 121 116 104 111 110 10 110 117 107 101 46 116 99 108 40 39 114 101 116 117 114 110 32 39 43 110 117 107 101 46 115 101 108 101 99 116 101 100 78 111 100 101 40 41 91 39 102 105 108 116 101 114 39 93 46 118 97 108 117 101 40 41 41}
    }
  old_expression_markers {{210 212 581 582 675 692 730 747 885 894}
    }
  box {0 -1121 3385 1580}
  transforms {{0 2}
    }
  cursor_position 1735
  scale {1 1}
  center {1536 790}
  cursor_initialised true
  initial_cursor_position {{0 1580}
    }
  group_animations {{0} imported: 0 selected: 0 items: "root transform/"}
  animation_layers {{1 11 1536 790 0 0 1 1 0 0 0 0}
    }
  name Text_python
  xpos -1
  ypos -46
 }
 Text2 {
  inputs 0
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "TCL OVERVIEW\n\nGetting a knob’s value of a specific node:\n\n#First frame of current read/write:\n\[value Read1.first]\n\n#Getting a knob’s value of current node:\n\[value this.first_frame]\n\n#Return label value of the input node:\n\[value this.size]\n\n#Name of the input node:\n\[value this.input0.label]\n\n#Name of the node before the group (Outside):\n\[value this.input.name]\n\n#Return 1 if the node is on error otherwise 0:\n\[value this.parent.input.name]\n\n#Get the bounding Box from the input of the node:\n\[value error]\n\n\n#Here some expression for the Format\nformat.x\nformat.y\nwidth\nheight\nbbox.x\nbbox.y\nbbox.w\nbbox.h\n\n#Get the format from the input of the node:\n\[value input.bbox.x]#left boundary\n\[value input.bbox.r]#right boundary\n\nGet the format from the input of the node:\n\[value input.format.r]#width\n\[value input.format.t]#height\n\n#Get the x position of the point #3 of the Bezier1 of the Roto1 node:\n\[value Roto1.curves.Bezier1.curve_points.3.main.x]\n\n#Return sample pixel value of the node Add1 reading in the red at position of knob Center:\n\[sample Add1 Red Center.x Center.y]\n\n#Get the value of the channel of a node, at a specific pixelcoordinates (e.g.: 10,10):\n\[sample \[node input] red 10 10]\n\n#---------------------------------------------------------------------\n#SET VALUES\n\n#Setting a knob’s value of a specific node:\n\[knob Read1.first 10]\n\n#Setting a variable, without returning that (useful in a textnode):\n\[set seq \[value Read1.file]; return]\n\n#---------------------------------------------------------------------\n#STRING\n\n#Replace string in current node file knob with regex (string “proj” to “projects” in all occurences):\n\[regsub -all \"proj\" \[value \[node this].file] \"projects\"] \n\n#String map (replace multiple stringpairs) (this returns: xxffffxxyy):\n\[string map \{\"aa\" \"xx\" \"bb\" \"yy\"\} \"aaffffaabb\" ]\n\n#Compare strings:\n\[string equal \[value Text1.message] \"bla\"]\n\n#Regexp matching:\n\[regexp -inline \"_v\\\[0-9]\{3\}\" \[value Read2.file]] \n\n#Evaluating string\n\[python os.getenv('rotate') == 'xavierb']\n\n#---------------------------------------------------------------------\n#IF CONDITION\n\n\[if \{condition\} \{expr1\} else \{expr2\}]\n\n#Example:\n\[if \{\[value blackpoint]==1\} \{return 2\} \{return 3\}]\n\[if \{\[value blackpoint]==1\} \{return True\} \{return False\}]\n\[if \{\[value blackpoint]==1\} \{return blackpoint\} \{return whitepoint\}]\n\[if \{\[value filter]==\"gaussian\"\} \{return filter\} \{return False\}]\n\n#OTHER METHOD\ncondition ? then : else\n\n#Example:\n#if (r==1)? return 0: else (return r*2)\nr ==1 ? 0 : r*2\n\n#---------------------------------------------------------------------\n#PATH MANIPULATIONS:\n\n#Filepath without extension:\n\[file rootname \[value \[topnode].file]]\n\n#Filename only:\n\[basename \[value \[topnode].file ]]\n\n#Filename only without extension:\n\[basename\[file rootname \[value \[topnode].file]]]"
  old_message {{69 88 80 82 69 83 83 73 79 78 32 84 67 76 10 10 71 101 116 116 105 110 103 32 97 32 107 110 111 98 8217 115 32 118 97 108 117 101 32 111 102 32 97 32 115 112 101 99 105 102 105 99 32 110 111 100 101 58 10 10 35 70 105 114 115 116 32 102 114 97 109 101 32 111 102 32 99 117 114 114 101 110 116 32 114 101 97 100 47 119 114 105 116 101 58 10 91 118 97 108 117 101 32 82 101 97 100 49 46 102 105 114 115 116 93 10 10 35 71 101 116 116 105 110 103 32 97 32 107 110 111 98 8217 115 32 118 97 108 117 101 32 111 102 32 99 117 114 114 101 110 116 32 110 111 100 101 58 10 49 10 10 35 82 101 116 117 114 110 32 108 97 98 101 108 32 118 97 108 117 101 32 111 102 32 116 104 101 32 105 110 112 117 116 32 110 111 100 101 58 10 91 118 97 108 117 101 32 116 104 105 115 46 115 105 122 101 93 10 10 35 78 97 109 101 32 111 102 32 116 104 101 32 105 110 112 117 116 32 110 111 100 101 58 10 91 118 97 108 117 101 32 116 104 105 115 46 105 110 112 117 116 48 46 108 97 98 101 108 93 10 10 35 78 97 109 101 32 111 102 32 116 104 101 32 110 111 100 101 32 98 101 102 111 114 101 32 116 104 101 32 103 114 111 117 112 32 40 79 117 116 115 105 100 101 41 58 10 91 118 97 108 117 101 32 116 104 105 115 46 105 110 112 117 116 46 110 97 109 101 93 10 10 35 82 101 116 117 114 110 32 49 32 105 102 32 116 104 101 32 110 111 100 101 32 105 115 32 111 110 32 101 114 114 111 114 32 111 116 104 101 114 119 105 115 101 32 48 58 10 91 118 97 108 117 101 32 116 104 105 115 46 112 97 114 101 110 116 46 105 110 112 117 116 46 110 97 109 101 93 10 10 35 71 101 116 32 116 104 101 32 98 111 117 110 100 105 110 103 32 66 111 120 32 102 114 111 109 32 116 104 101 32 105 110 112 117 116 32 111 102 32 116 104 101 32 110 111 100 101 58 10 48 10 10 10 35 72 101 114 101 32 115 111 109 101 32 101 120 112 114 101 115 115 105 111 110 32 102 111 114 32 116 104 101 32 70 111 114 109 97 116 10 102 111 114 109 97 116 46 120 10 102 111 114 109 97 116 46 121 10 119 105 100 116 104 10 104 101 105 103 104 116 10 98 98 111 120 46 120 10 98 98 111 120 46 121 10 98 98 111 120 46 119 10 98 98 111 120 46 104 10 10 35 71 101 116 32 116 104 101 32 102 111 114 109 97 116 32 102 114 111 109 32 116 104 101 32 105 110 112 117 116 32 111 102 32 116 104 101 32 110 111 100 101 58 10 91 118 97 108 117 101 32 105 110 112 117 116 46 98 98 111 120 46 120 93 35 108 101 102 116 32 98 111 117 110 100 97 114 121 10 91 118 97 108 117 101 32 105 110 112 117 116 46 98 98 111 120 46 114 93 35 114 105 103 104 116 32 98 111 117 110 100 97 114 121 10 10 71 101 116 32 116 104 101 32 102 111 114 109 97 116 32 102 114 111 109 32 116 104 101 32 105 110 112 117 116 32 111 102 32 116 104 101 32 110 111 100 101 58 10 91 118 97 108 117 101 32 105 110 112 117 116 46 102 111 114 109 97 116 46 114 93 35 119 105 100 116 104 10 91 118 97 108 117 101 32 105 110 112 117 116 46 102 111 114 109 97 116 46 116 93 35 104 101 105 103 104 116 10 10 35 71 101 116 32 116 104 101 32 120 32 112 111 115 105 116 105 111 110 32 111 102 32 116 104 101 32 112 111 105 110 116 32 35 51 32 111 102 32 116 104 101 32 66 101 122 105 101 114 49 32 111 102 32 116 104 101 32 82 111 116 111 49 32 110 111 100 101 58 10 91 118 97 108 117 101 32 82 111 116 111 49 46 99 117 114 118 101 115 46 66 101 122 105 101 114 49 46 99 117 114 118 101 95 112 111 105 110 116 115 46 51 46 109 97 105 110 46 120 93 10 10 35 82 101 116 117 114 110 32 115 97 109 112 108 101 32 112 105 120 101 108 32 118 97 108 117 101 32 111 102 32 116 104 101 32 110 111 100 101 32 65 100 100 49 32 114 101 97 100 105 110 103 32 105 110 32 116 104 101 32 114 101 100 32 97 116 32 112 111 115 105 116 105 111 110 32 111 102 32 107 110 111 98 32 67 101 110 116 101 114 58 10 91 115 97 109 112 108 101 32 65 100 100 49 32 82 101 100 32 67 101 110 116 101 114 46 120 32 67 101 110 116 101 114 46 121 93 10 10 35 71 101 116 32 116 104 101 32 118 97 108 117 101 32 111 102 32 116 104 101 32 99 104 97 110 110 101 108 32 111 102 32 97 32 110 111 100 101 44 32 97 116 32 97 32 115 112 101 99 105 102 105 99 32 112 105 120 101 108 99 111 111 114 100 105 110 97 116 101 115 32 40 101 46 103 46 58 32 49 48 44 49 48 41 58 10 91 115 97 109 112 108 101 32 91 110 111 100 101 32 105 110 112 117 116 93 32 114 101 100 32 49 48 32 49 48 93 10 10 35 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 10 35 83 69 84 32 86 65 76 85 69 83 10 10 35 83 101 116 116 105 110 103 32 97 32 107 110 111 98 8217 115 32 118 97 108 117 101 32 111 102 32 97 32 115 112 101 99 105 102 105 99 32 110 111 100 101 58 10 91 107 110 111 98 32 82 101 97 100 49 46 102 105 114 115 116 32 49 48 93 10 10 35 83 101 116 116 105 110 103 32 97 32 118 97 114 105 97 98 108 101 44 32 119 105 116 104 111 117 116 32 114 101 116 117 114 110 105 110 103 32 116 104 97 116 32 40 117 115 101 102 117 108 32 105 110 32 97 32 116 101 120 116 110 111 100 101 41 58 10 91 115 101 116 32 115 101 113 32 91 118 97 108 117 101 32 82 101 97 100 49 46 102 105 108 101 93 59 32 114 101 116 117 114 110 93 10 10 35 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 10 35 83 84 82 73 78 71 10 10 35 82 101 112 108 97 99 101 32 115 116 114 105 110 103 32 105 110 32 99 117 114 114 101 110 116 32 110 111 100 101 32 102 105 108 101 32 107 110 111 98 32 119 105 116 104 32 114 101 103 101 120 32 40 115 116 114 105 110 103 32 8220 112 114 111 106 8221 32 116 111 32 8220 112 114 111 106 101 99 116 115 8221 32 105 110 32 97 108 108 32 111 99 99 117 114 101 110 99 101 115 41 58 10 91 114 101 103 115 117 98 32 45 97 108 108 32 34 112 114 111 106 34 32 91 118 97 108 117 101 32 110 111 100 101 49 52 48 97 56 49 51 50 48 46 102 105 108 101 93 32 34 112 114 111 106 101 99 116 115 34 93 32 10 10 35 83 116 114 105 110 103 32 109 97 112 32 40 114 101 112 108 97 99 101 32 109 117 108 116 105 112 108 101 32 115 116 114 105 110 103 112 97 105 114 115 41 32 40 116 104 105 115 32 114 101 116 117 114 110 115 58 32 120 120 102 102 102 102 120 120 121 121 41 58 10 120 120 102 102 102 102 120 120 121 121 10 10 35 67 111 109 112 97 114 101 32 115 116 114 105 110 103 115 58 10 91 115 116 114 105 110 103 32 101 113 117 97 108 32 91 118 97 108 117 101 32 84 101 120 116 49 46 109 101 115 115 97 103 101 93 32 34 98 108 97 34 93 10 10 35 82 101 103 101 120 112 32 109 97 116 99 104 105 110 103 58 10 91 114 101 103 101 120 112 32 45 105 110 108 105 110 101 32 34 95 118 92 91 48 45 57 93 123 51 125 34 32 91 118 97 108 117 101 32 82 101 97 100 50 46 102 105 108 101 93 93 32 10 10 35 69 118 97 108 117 97 116 105 110 103 32 115 116 114 105 110 103 10 70 97 108 115 101 10 10 35 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 10 35 73 70 32 67 79 78 68 73 84 73 79 78 10 10 91 105 102 32 123 99 111 110 100 105 116 105 111 110 125 32 123 101 120 112 114 49 125 32 101 108 115 101 32 123 101 120 112 114 50 125 93 10 10 35 69 120 97 109 112 108 101 58 10 91 105 102 32 123 91 118 97 108 117 101 32 98 108 97 99 107 112 111 105 110 116 93 61 61 49 125 32 123 114 101 116 117 114 110 32 50 125 32 123 114 101 116 117 114 110 32 51 125 93 10 91 105 102 32 123 91 118 97 108 117 101 32 98 108 97 99 107 112 111 105 110 116 93 61 61 49 125 32 123 114 101 116 117 114 110 32 84 114 117 101 125 32 123 114 101 116 117 114 110 32 70 97 108 115 101 125 93 10 91 105 102 32 123 91 118 97 108 117 101 32 98 108 97 99 107 112 111 105 110 116 93 61 61 49 125 32 123 114 101 116 117 114 110 32 98 108 97 99 107 112 111 105 110 116 125 32 123 114 101 116 117 114 110 32 119 104 105 116 101 112 111 105 110 116 125 93 10 91 105 102 32 123 91 118 97 108 117 101 32 102 105 108 116 101 114 93 61 61 34 103 97 117 115 115 105 97 110 34 125 32 123 114 101 116 117 114 110 32 102 105 108 116 101 114 125 32 123 114 101 116 117 114 110 32 70 97 108 115 101 125 93 10 10 35 79 84 72 69 82 32 77 69 84 72 79 68 10 99 111 110 100 105 116 105 111 110 32 63 32 116 104 101 110 32 58 32 101 108 115 101 10 10 35 69 120 97 109 112 108 101 58 10 35 105 102 32 40 114 61 61 49 41 63 32 114 101 116 117 114 110 32 48 58 32 101 108 115 101 32 40 114 101 116 117 114 110 32 114 42 50 41 10 114 32 61 61 49 32 63 32 48 32 58 32 114 42 50 10 10 35 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 10 35 80 65 84 72 32 77 65 78 73 80 85 76 65 84 73 79 78 83 58 10 10 35 70 105 108 101 112 97 116 104 32 119 105 116 104 111 117 116 32 101 120 116 101 110 115 105 111 110 58 10 91 102 105 108 101 32 114 111 111 116 110 97 109 101 32 91 118 97 108 117 101 32 110 111 100 101 49 52 48 97 56 49 51 50 48 46 102 105 108 101 93 93 10 10 35 70 105 108 101 110 97 109 101 32 111 110 108 121 58 10 91 98 97 115 101 110 97 109 101 32 91 118 97 108 117 101 32 110 111 100 101 49 52 48 97 56 49 51 50 48 46 102 105 108 101 32 93 93 10 10 35 70 105 108 101 110 97 109 101 32 111 110 108 121 32 119 105 116 104 111 117 116 32 101 120 116 101 110 115 105 111 110 58 10 91 98 97 115 101 110 97 109 101 91 102 105 108 101 32 114 111 111 116 110 97 109 101 32 91 118 97 108 117 101 32 110 111 100 101 49 52 48 97 56 49 51 50 48 46 102 105 108 101 93 93 93}
    }
  old_expression_markers {{158 158 471 471 1627 1639 1732 1741 1895 1899 2531 2543 2586 2598 2674 2686}
    }
  transforms {{0 2}
    }
  cursor_position 954
  scale {1 1}
  center {1536 790}
  group_animations {{0} imported: 0 selected: 0 items: "root transform/"}
  animation_layers {{1 11 1536 790 0 0 1 1 0 0 0 0}
    }
  name Text_TCL
  xpos -2
  ypos 35
 }
 Text2 {
  inputs 0
  font_size_toolbar 100
  font_width_toolbar 100
  font_height_toolbar 100
  message "https://www.tutorialspoint.com/python/index.htm\n\nhttps://learn.foundry.com/nuke/developers/63/pythondevguide/basics.html\n\nhttps://learn.foundry.com/nuke/developers/63/pythondevguide/index.html\n\n#----------------------------------------------------------------------------------------------\n\nhttp://www.nukepedia.com/tcl/tcl-reference\n\nhttp://www.nukepedia.com/reference/Tcl/group__tcl__builtin.html\\\n\nhttp://www.lookinvfx.com/nuke-tcl-snippets/\n\nhttp://thoughtvfx.blogspot.de/2012/12/nuke-tcl-tips.html\n"
  old_message {{101 119 113 101 113 119 101 113}
    }
  transforms {{0 2}
    }
  cursor_position 52
  scale {1 1}
  center {1536 790}
  cursor_initialised true
  initial_cursor_position {{0 1580}
    }
  group_animations {{0} imported: 0 selected: 0 items: "root transform/"}
  animation_layers {{1 11 1536 790 0 0 1 1 0 0 0 0}
    }
  name Text_websites
  xpos -3
  ypos 115
 }
 StickyNote {
  inputs 0
  name StickyNote_PythonMath
  label "#MATH FUNCTIONS AND WAVE GENERATOR\n#PYTHON\n#--------------------------------------------------------\n\n#IMPORT THE MATH LIBRARY\nimport math\n\n#--------------------------------------------------------\n#WAVE GENERATOR\n\n#RANDOM WAVE\nrandom((frame+offset)/waveLength) * (maxVal-minVal) + minVal\n\n#NOISE WAVE\n(noise((frame+offset)/waveLength)+1)/2 * (maxVal-minVal) + minVal\n\n#SINE WAVE\n(sin(2*pi*(frame+offset)/waveLength)+1)/2 * (maxVal-minVal) + minVal\n\n#TRIANGLE WAVE\n(asin(sin(2*pi*(frame+offset)/waveLength))/pi+0.5) * (maxVal-minVal) + minVal\n\n#SQUARE WAVE\nint(sin(2*pi*(frame+offset)/waveLength)+1) * (maxVal-minVal) + minVal\n\n#SAWTOOTH WAVE\n((frame+offset) % waveLength)/waveLength * (maxVal-minVal) + minVal\n\n#SAWTOOTH (PARABOLIC) WAVE\nsin((pi*(frame+offset)/(2*waveLength)) % (pi/2)) * (maxVal-minVal) + minVal\n\n#SAWTOOTH (PARABOLIC REVERSED) WAVE\ncos((pi*(frame+offset)/(2*waveLength)) % (pi/2)) * (maxVal-minVal) + minVal\n\n#SAWTOOTH (EXPONENTIAL) WAVE\n(exp(2*pi*((frame+offset) % waveLength)/waveLength)-1)/exp(2*pi) * (maxVal-minVal) + minVal\n\n#BOUNCE WAVE\nabs(sin(pi*(frame + offset)/waveLength))* (maxVal-minVal) + minVal\n\n#BLIP\n((frame+(offset+waveLength)) % (waveLength+blipLength)/(waveLength)) *(waveLength/blipLength) - (waveLength/blipLength) >= 0 ? maxVal : minVa\n\n#SINEBLIP\n((int((frame+offset) % waveLength)) >= 0 ? ((int((frame+offset) % waveLength)) <= (0+(blipLength-1)) ? ((sin(pi*((frame+offset) % waveLength)/blipLength)/2+1/2) * (2*maxVal-2*minVal) + (2*minVal-maxVal)) : minVal)  : minVal)\n"
  xpos -1473
  ypos 5091
 }
 StickyNote {
  inputs 0
  name StickyNote_websiteMath
  label "www.cameroncarson.com/nuke-wave-expressions/\n\nhttps://docs.python.org/2/library/math.html\n\nhttps://en.wikibooks.org/wiki/Python_Programming/Basic_Math\n\n#--------------------------------------------------------------------------\n\nhttps://help.thefoundry.co.uk/nuke/8.0/content/user_guide/expressions/adding_math_functions.html\n"
  xpos -415
  ypos 5085
 }
 StickyNote {
  inputs 0
  name StickyNote_Tricks
  label "TRICKS\n\n#-----------------------------------------------------------------------------\n#In case you would like to switch the antialiasing inside a Scanline Renderer to “high” when rendering on the farm, but keep working in the GUI with “none”, you could use a line like this:\nnuke.selectedNode()\['antialiasing'].setExpression('\$gui? 0:3')\n\n#-----------------------------------------------------------------------------\ntcl:\nin Transform1.filter \{set_expression \{Transform2.filter\}\}\npython\nk=nuke.toNode('Transform1')\['filter']\nk.setExpression('Transform2.filter',0)\n\n#-----------------------------------------------------------------------------\n#Switch Node change only in the frames in the list\n# If you use this inside a Switch Node, it can change value only in those frames\nnuke.frame() in \[1025,1072,1074]\n\n#current frame\nprint nuke.frame()\n\n#go to frame x\nnuke.frame(x)\n\n#------------------------------------------------------------------------------------------\n#AUTOLABEL\n\nn = nuke.selectedNodes()\nfor p in n:\n    p\['autolabel'].setValue(\"nuke.thisNode().name()\")\n\n#Example01\n#Try this with a Grade Node\nn = nuke.selectedNodes()\nfor p in n:\n    p\['autolabel'].setValue(\"nuke.thisNode().name() + \\\"\\\\n\\\" + '(' + str(nuke.thisNode()\['white'].value()) + ')' \")\n\n#Example02\n#Try this with a Blur Node\nn = nuke.selectedNodes()\nfor p in n:\n    p\['autolabel'].setValue(\"nuke.thisNode().name() + \\\"\\\\n\\\" + '(' + nuke.thisNode()\['filter'].value() + ')' \")\n\n#Example03\n#When you create a Blur node, every time you will see this autolabel\ndef BlurLabel():\n    n = nuke.thisNode()\n    if n.Class() == \"Blur\":\n        autoLabel = n.name() + (' big!' if n\['size'].value()>100 else ' small')\n        if n\['label'].value():\n            autoLabel = autoLabel + '\\n' + str(n\['size'].value())\n        return autoLabel\n \nnuke.addAutolabel(BlurLabel)"
  selected true
  xpos -1890
  ypos 6835
 }
end_group