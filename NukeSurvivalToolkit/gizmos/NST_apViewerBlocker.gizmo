NoOp {
 name ViewerBlocker
 help "Prevent changing unintentionally one or more viewer inputs when you only want to see through them. Useful when you keep certain viewer numbers assigned to specific parts of the script (e.g. 3 to the scan and 4 to the output).\n\nViewerBlocker v0.1 by Adrian Pueyo\nadrianpueyo.com, 2016"
 knobChanged "if \"block\" in nuke.thisKnob().name() or nuke.thisKnob().name() == \"viewer\":\n    node_list = dict()\n    for i in range(1,10):\n        k = nuke.thisNode().knob(\"block\" + str(i))\n        if k.getValue() != \"\":\n            node_list\[i] = k.getValue()\n    print node_list\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").getValue())\n    functionToSet = \"if nuke.thisKnob().name() in \['inputChange','input_number']:\\n    try:\\n\"\n    for i in node_list:\n        functionToSet += '        nuke.thisNode().setInput(%s,nuke.toNode(\"%s\"))\\n'%(str(i-1),node_list\[i])\n    functionToSet += \"    except:\\n        pass\"\n\n    vwr.knob(\"knobChanged\").setValue(functionToSet)"
 autolabel "#\"%s\\n(%s)\"%(nuke.thisNode().name(),nuke.thisNode().knob(\"viewer\").evaluate())\nnuke.thisNode().name()+(\"\\n(%s)\"%nuke.thisNode().knob(\"viewer\").evaluate()*int(nuke.thisNode().knob(\"viewer\").evaluate()!=\"\"))"
 hide_input true
 addUserKnob {20 ViewerBlocker}
 addUserKnob {1 viewer t "Write the name of the viewer where you want to block some inputs (usually Viewer1), or select it and click on the next button."}
 addUserKnob {22 setSelected l "Set to selected" t "Set the viewer to the one selected." -STARTLINE T "sn = nuke.selectedNode()\nif sn.Class() == \"Viewer\":\n    nuke.thisNode().knob(\"viewer\").setValue(sn.name())\nelse:\n    nuke.message(\"Please select a viewer node.\")"}
 addUserKnob {22 clearViewer l Unblock t "Unblock the viewer and leave the field blank." -STARTLINE T "vn = nuke.thisNode().knob(\"viewer\").evaluate()\nif nuke.toNode(vn):\n    nuke.toNode(vn).knob(\"knobChanged\").setValue(\"\")\nelse:\n    nuke.message(\"Looks like %s doesn't exist!\\n (emptying the field anyway...)\" % vn)\nnuke.thisNode().knob(\"viewer\").setValue(\"\")"}
 addUserKnob {26 ""}
 addUserKnob {1 block1 l 1 t "Name of the node to block to the viewer's input 1.\nLeave empty to keep it unblocked."}
 addUserKnob {22 get1 l "Set to current" t "Block the viewer's input 1 to its current input." -STARTLINE T "indx = 1\ntry:\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate())\n    selInput = vwr.input(int(indx-1)).name()\n    nuke.thisNode().knob(\"block%s\"%(str(indx))).setValue(selInput)\nexcept:\n    if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()):\n        if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()).input(indx-1):\n            nuke.message(\"Connection error. Please check %s's input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n        else:\n            nuke.message(\"Connection error. Please check %s has something piped in input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n    else:\n        nuke.message(\"Error: Please check the viewer %s exists.\"%nuke.thisNode().knob(\"viewer\").evaluate())"}
 addUserKnob {22 clear1 l Clear -STARTLINE T "indx = 1\nnuke.thisNode().knob(\"block%s\"%(str(indx))).setValue('')"}
 addUserKnob {1 block2 l 2 t "Name of the node to block to the viewer's input 2.\nLeave empty to keep it unblocked."}
 addUserKnob {22 get2 l "Set to current" t "Block the viewer's input 2 to its current input." -STARTLINE T "indx = 2\ntry:\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate())\n    selInput = vwr.input(int(indx-1)).name()\n    nuke.thisNode().knob(\"block%s\"%(str(indx))).setValue(selInput)\nexcept:\n    if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()):\n        if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()).input(indx-1):\n            nuke.message(\"Connection error. Please check %s's input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n        else:\n            nuke.message(\"Connection error. Please check %s has something piped in input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n    else:\n        nuke.message(\"Error: Please check the viewer %s exists.\"%nuke.thisNode().knob(\"viewer\").evaluate())"}
 addUserKnob {22 clear2 l Clear -STARTLINE T "indx = 2\nnuke.thisNode().knob(\"block%s\"%(str(indx))).setValue('')"}
 addUserKnob {1 block3 l 3 t "Name of the node to block to the viewer's input 3.\nLeave empty to keep it unblocked."}
 addUserKnob {22 get3 l "Set to current" t "Block the viewer's input 3 to its current input." -STARTLINE T "indx = 3\ntry:\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate())\n    selInput = vwr.input(int(indx-1)).name()\n    nuke.thisNode().knob(\"block%s\"%(str(indx))).setValue(selInput)\nexcept:\n    if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()):\n        if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()).input(indx-1):\n            nuke.message(\"Connection error. Please check %s's input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n        else:\n            nuke.message(\"Connection error. Please check %s has something piped in input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n    else:\n        nuke.message(\"Error: Please check the viewer %s exists.\"%nuke.thisNode().knob(\"viewer\").evaluate())"}
 addUserKnob {22 clear3 l Clear -STARTLINE T "indx = 3\nnuke.thisNode().knob(\"block%s\"%(str(indx))).setValue('')"}
 addUserKnob {1 block4 l 4 t "Name of the node to block to the viewer's input 4.\nLeave empty to keep it unblocked."}
 addUserKnob {22 get4 l "Set to current" t "Block the viewer's input 4 to its current input." -STARTLINE T "indx = 4\ntry:\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate())\n    selInput = vwr.input(int(indx-1)).name()\n    nuke.thisNode().knob(\"block%s\"%(str(indx))).setValue(selInput)\nexcept:\n    if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()):\n        if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()).input(indx-1):\n            nuke.message(\"Connection error. Please check %s's input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n        else:\n            nuke.message(\"Connection error. Please check %s has something piped in input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n    else:\n        nuke.message(\"Error: Please check the viewer %s exists.\"%nuke.thisNode().knob(\"viewer\").evaluate())"}
 addUserKnob {22 clear4 l Clear -STARTLINE T "indx = 4\nnuke.thisNode().knob(\"block%s\"%(str(indx))).setValue('')"}
 addUserKnob {1 block5 l 5 t "Name of the node to block to the viewer's input 5.\nLeave empty to keep it unblocked."}
 addUserKnob {22 get5 l "Set to current" t "Block the viewer's input 5 to its current input." -STARTLINE T "indx = 5\ntry:\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate())\n    selInput = vwr.input(int(indx-1)).name()\n    nuke.thisNode().knob(\"block%s\"%(str(indx))).setValue(selInput)\nexcept:\n    if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()):\n        if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()).input(indx-1):\n            nuke.message(\"Connection error. Please check %s's input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n        else:\n            nuke.message(\"Connection error. Please check %s has something piped in input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n    else:\n        nuke.message(\"Error: Please check the viewer %s exists.\"%nuke.thisNode().knob(\"viewer\").evaluate())"}
 addUserKnob {22 clear5 l Clear -STARTLINE T "indx = 5\nnuke.thisNode().knob(\"block%s\"%(str(indx))).setValue('')"}
 addUserKnob {1 block6 l 6 t "Name of the node to block to the viewer's input 6.\nLeave empty to keep it unblocked."}
 addUserKnob {22 get6 l "Set to current" t "Block the viewer's input 6 to its current input." -STARTLINE T "indx = 6\ntry:\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate())\n    selInput = vwr.input(int(indx-1)).name()\n    nuke.thisNode().knob(\"block%s\"%(str(indx))).setValue(selInput)\nexcept:\n    if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()):\n        if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()).input(indx-1):\n            nuke.message(\"Connection error. Please check %s's input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n        else:\n            nuke.message(\"Connection error. Please check %s has something piped in input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n    else:\n        nuke.message(\"Error: Please check the viewer %s exists.\"%nuke.thisNode().knob(\"viewer\").evaluate())"}
 addUserKnob {22 clear6 l Clear -STARTLINE T "indx = 6\nnuke.thisNode().knob(\"block%s\"%(str(indx))).setValue('')"}
 addUserKnob {1 block7 l 7 t "Name of the node to block to the viewer's input 7.\nLeave empty to keep it unblocked."}
 addUserKnob {22 get7 l "Set to current" t "Block the viewer's input 7 to its current input." -STARTLINE T "indx = 7\ntry:\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate())\n    selInput = vwr.input(int(indx-1)).name()\n    nuke.thisNode().knob(\"block%s\"%(str(indx))).setValue(selInput)\nexcept:\n    if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()):\n        if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()).input(indx-1):\n            nuke.message(\"Connection error. Please check %s's input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n        else:\n            nuke.message(\"Connection error. Please check %s has something piped in input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n    else:\n        nuke.message(\"Error: Please check the viewer %s exists.\"%nuke.thisNode().knob(\"viewer\").evaluate())"}
 addUserKnob {22 clear7 l Clear -STARTLINE T "indx = 7\nnuke.thisNode().knob(\"block%s\"%(str(indx))).setValue('')"}
 addUserKnob {1 block8 l 8 t "Name of the node to block to the viewer's input 8.\nLeave empty to keep it unblocked."}
 addUserKnob {22 get8 l "Set to current" t "Block the viewer's input 8 to its current input." -STARTLINE T "indx = 8\ntry:\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate())\n    selInput = vwr.input(int(indx-1)).name()\n    nuke.thisNode().knob(\"block%s\"%(str(indx))).setValue(selInput)\nexcept:\n    if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()):\n        if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()).input(indx-1):\n            nuke.message(\"Connection error. Please check %s's input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n        else:\n            nuke.message(\"Connection error. Please check %s has something piped in input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n    else:\n        nuke.message(\"Error: Please check the viewer %s exists.\"%nuke.thisNode().knob(\"viewer\").evaluate())"}
 addUserKnob {22 clear8 l Clear -STARTLINE T "indx = 8\nnuke.thisNode().knob(\"block%s\"%(str(indx))).setValue('')"}
 addUserKnob {1 block9 l 9 t "Name of the node to block to the viewer's input 9.\nLeave empty to keep it unblocked."}
 addUserKnob {22 get9 l "Set to current" t "Block the viewer's input 9 to its current input." -STARTLINE T "indx = 9\ntry:\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate())\n    selInput = vwr.input(int(indx-1)).name()\n    nuke.thisNode().knob(\"block%s\"%(str(indx))).setValue(selInput)\nexcept:\n    if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()):\n        if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()).input(indx-1):\n            nuke.message(\"Connection error. Please check %s's input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n        else:\n            nuke.message(\"Connection error. Please check %s has something piped in input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n    else:\n        nuke.message(\"Error: Please check the viewer %s exists.\"%nuke.thisNode().knob(\"viewer\").evaluate())"}
 addUserKnob {22 clear9 l Clear -STARTLINE T "indx = 9\nnuke.thisNode().knob(\"block%s\"%(str(indx))).setValue('')"}
 addUserKnob {1 block0 l 0 t "Name of the node to block to the viewer's input 0.\nLeave empty to keep it unblocked."}
 addUserKnob {22 get0 l "Set to current" t "Block the viewer's input 0 to its current input." -STARTLINE T "indx = 0\ntry:\n    vwr = nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate())\n    selInput = vwr.input(int(9)).name()\n    nuke.thisNode().knob(\"block%s\"%(str(0))).setValue(selInput)\nexcept:\n    if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()):\n        if nuke.toNode(nuke.thisNode().knob(\"viewer\").evaluate()).input(9):\n            nuke.message(\"Connection error. Please check %s's input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n        else:\n            nuke.message(\"Connection error. Please check %s has something piped in input %s\"%(nuke.thisNode().knob(\"viewer\").evaluate(),str(indx)))\n    else:\n        nuke.message(\"Error: Please check the viewer %s exists.\"%nuke.thisNode().knob(\"viewer\").evaluate())"}
 addUserKnob {22 clear0 l Clear -STARTLINE T "indx = 0\nnuke.thisNode().knob(\"block%s\"%(str(indx))).setValue('')"}
 addUserKnob {26 copyright_kind_of l "" +STARTLINE T "<i><font color=grey><text-align=right>            ViewerBlocker by Adrian Pueyo"}
}
